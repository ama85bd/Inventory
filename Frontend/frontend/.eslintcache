[{"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\index.js":"1","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\App.js":"2","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\data.js":"4","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\Users.js":"5","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\HomeScreen.js":"6","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserScreen.js":"7","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\LoadingBox.js":"8","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\MessageBox.js":"9","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\store.js":"10","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\userRedures.js":"11","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\userConstants.js":"12","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\userActions.js":"13","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SigninScreen.js":"14","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\RegisterScreen.js":"15","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserListScreen.js":"16","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\AdminRoute.js":"17","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserEditScreen.js":"18","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateUserScreen.js":"19","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\stationaryReducers.js":"20","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\stationaryConstants.js":"21","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryTypeScreen.js":"22","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\stationaryActions.js":"23","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateStationaryTypeScreen.js":"24","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryTypeEditScreen.js":"25","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\sourceReducers.js":"26","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\sourceConstants.js":"27","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SourceScreen.js":"28","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\sourceActions.js":"29","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateSourceScreen.js":"30","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SourceEditScreen.js":"31","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryPurchaseScreen.js":"32","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\stationaryPurchaseReducers.js":"33","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\stationaryPurchaseConstants.js":"34","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\stationaryPurchaseActions.js":"35","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateStationaryPurchaseScreen.js":"36","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryPurchaseEditScreen.js":"37","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateStationaryConsumeScreen.js":"38","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryConsumeScreen.js":"39","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationarySearchScreen.js":"40","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryConsumeSearchEditScreen.js":"41","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\StationaryAll.js":"42","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserPasswordEditScreen.js":"43","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\deviceReducers.js":"44","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\deviceConstants.js":"45","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceTypeScreen.js":"46","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\deviceActions.js":"47","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateDeviceTypeScreen.js":"48","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceTypeEditScreen.js":"49","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePurchaseScreen.js":"50","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateDevicePurchaseScreen.js":"51","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePurchaseEditScreen.js":"52","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesScreen.js":"53","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateDevicePropertiesScreen.js":"54","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesEditScreen.js":"55","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesViewScreen.js":"56","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceAssignScreen.js":"57","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceAssignToUserScreen.js":"58","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\SearchBox.js":"59","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SearchScreen.js":"60","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SearchAllDeviceScreen.js":"61","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesAddScreen.js":"62","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesRemoveScreen.js":"63"},{"size":616,"mtime":1612773932087,"results":"64","hashOfConfig":"65"},{"size":23145,"mtime":1631695114181,"results":"66","hashOfConfig":"65"},{"size":362,"mtime":499162500000,"results":"67","hashOfConfig":"65"},{"size":272,"mtime":1612704437925,"results":"68","hashOfConfig":"69"},{"size":377,"mtime":1612706383333,"results":"70","hashOfConfig":"65"},{"size":3866,"mtime":1631533413232,"results":"71","hashOfConfig":"65"},{"size":1235,"mtime":1612788407793,"results":"72","hashOfConfig":"65"},{"size":194,"mtime":1612792882981,"results":"73","hashOfConfig":"65"},{"size":196,"mtime":1612947106131,"results":"74","hashOfConfig":"65"},{"size":5374,"mtime":1631684070289,"results":"75","hashOfConfig":"65"},{"size":8285,"mtime":1618067975901,"results":"76","hashOfConfig":"65"},{"size":2537,"mtime":1618067859590,"results":"77","hashOfConfig":"65"},{"size":9354,"mtime":1618067920334,"results":"78","hashOfConfig":"65"},{"size":2290,"mtime":1617993760949,"results":"79","hashOfConfig":"65"},{"size":3325,"mtime":1612860495683,"results":"80","hashOfConfig":"65"},{"size":3354,"mtime":1618067021533,"results":"81","hashOfConfig":"65"},{"size":551,"mtime":1612803544096,"results":"82","hashOfConfig":"65"},{"size":3454,"mtime":1612811991329,"results":"83","hashOfConfig":"65"},{"size":3100,"mtime":1612860462821,"results":"84","hashOfConfig":"65"},{"size":3049,"mtime":1618381006223,"results":"85","hashOfConfig":"65"},{"size":1459,"mtime":1612951600878,"results":"86","hashOfConfig":"65"},{"size":3053,"mtime":1618379932890,"results":"87","hashOfConfig":"65"},{"size":4067,"mtime":1612878949213,"results":"88","hashOfConfig":"65"},{"size":2078,"mtime":1612940241823,"results":"89","hashOfConfig":"65"},{"size":2875,"mtime":1613033833283,"results":"90","hashOfConfig":"65"},{"size":2671,"mtime":1612946321417,"results":"91","hashOfConfig":"65"},{"size":1155,"mtime":1612946156329,"results":"92","hashOfConfig":"65"},{"size":2611,"mtime":1612946526670,"results":"93","hashOfConfig":"65"},{"size":3716,"mtime":1612946331055,"results":"94","hashOfConfig":"65"},{"size":1605,"mtime":1612944930251,"results":"95","hashOfConfig":"65"},{"size":2289,"mtime":1612946030834,"results":"96","hashOfConfig":"65"},{"size":4232,"mtime":1618156537957,"results":"97","hashOfConfig":"65"},{"size":9021,"mtime":1618155868960,"results":"98","hashOfConfig":"65"},{"size":4541,"mtime":1618473857198,"results":"99","hashOfConfig":"65"},{"size":12343,"mtime":1618156723343,"results":"100","hashOfConfig":"65"},{"size":4445,"mtime":1618758467594,"results":"101","hashOfConfig":"65"},{"size":6345,"mtime":1618821153652,"results":"102","hashOfConfig":"65"},{"size":5703,"mtime":1615900618718,"results":"103","hashOfConfig":"65"},{"size":1625,"mtime":1615811643568,"results":"104","hashOfConfig":"65"},{"size":7773,"mtime":1618475983867,"results":"105","hashOfConfig":"65"},{"size":6426,"mtime":1617989872283,"results":"106","hashOfConfig":"65"},{"size":590,"mtime":1628923187526,"results":"107","hashOfConfig":"65"},{"size":4563,"mtime":1618475952914,"results":"108","hashOfConfig":"65"},{"size":16983,"mtime":1631683660122,"results":"109","hashOfConfig":"65"},{"size":7938,"mtime":1631683603599,"results":"110","hashOfConfig":"65"},{"size":3092,"mtime":1618415243193,"results":"111","hashOfConfig":"65"},{"size":25849,"mtime":1631692179774,"results":"112","hashOfConfig":"65"},{"size":1642,"mtime":1618380529877,"results":"113","hashOfConfig":"65"},{"size":2588,"mtime":1618414688620,"results":"114","hashOfConfig":"65"},{"size":4176,"mtime":1618475884623,"results":"115","hashOfConfig":"65"},{"size":4914,"mtime":1618475907491,"results":"116","hashOfConfig":"65"},{"size":6935,"mtime":1618822254804,"results":"117","hashOfConfig":"65"},{"size":5472,"mtime":1631682637002,"results":"118","hashOfConfig":"65"},{"size":7866,"mtime":1631533957264,"results":"119","hashOfConfig":"65"},{"size":10020,"mtime":1618828417523,"results":"120","hashOfConfig":"65"},{"size":17690,"mtime":1631687452185,"results":"121","hashOfConfig":"65"},{"size":5514,"mtime":1629269957585,"results":"122","hashOfConfig":"65"},{"size":9732,"mtime":1629269876013,"results":"123","hashOfConfig":"65"},{"size":743,"mtime":1631372533239,"results":"124","hashOfConfig":"65"},{"size":17919,"mtime":1631693935131,"results":"125","hashOfConfig":"65"},{"size":18100,"mtime":1631693992000,"results":"126","hashOfConfig":"65"},{"size":11560,"mtime":1631680738623,"results":"127","hashOfConfig":"65"},{"size":11621,"mtime":1631686282617,"results":"128","hashOfConfig":"65"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},"1vxxq8e",{"filePath":"132","messages":"133","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"138"},"1us1jqf",{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"131"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"131"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"131"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"131"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"131"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"210","usedDeprecatedRules":"131"},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"131"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"131"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"131"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"131"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"131"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"131"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"247","messages":"248","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"131"},{"filePath":"250","messages":"251","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"252","usedDeprecatedRules":"131"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"131"},{"filePath":"256","messages":"257","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"258","usedDeprecatedRules":"131"},{"filePath":"259","messages":"260","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"131"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"264","usedDeprecatedRules":"131"},{"filePath":"265","messages":"266","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"267","usedDeprecatedRules":"131"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"270","usedDeprecatedRules":"131"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273","usedDeprecatedRules":"131"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"131"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"279","usedDeprecatedRules":"131"},"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\index.js",[],["280","281"],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\App.js",["282","283","284","285","286"],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\data.js",[],["287","288"],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\Users.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\HomeScreen.js",["289","290","291","292","293","294"],"import React, { useEffect, useState } from \"react\";\r\nimport Users from \"../components/Users\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listUsers } from \"../actions/userActions\";\r\nimport StationaryAll from \"../components/StationaryAll\";\r\nimport { getAllStationary } from \"../actions/stationaryPurchaseActions\";\r\nimport { listDeviceHomeAll } from \"../actions/deviceActions\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { BsChevronDown } from \"react-icons/bs\"; //react-icon\r\n\r\nexport default function HomeScreen() {\r\n  const dispatch = useDispatch();\r\n  // const userList = useSelector((state) => state.userList);\r\n  // const { loading, error, users } = userList;\r\n\r\n  const allStationaryList = useSelector((state) => state.allStationaryList);\r\n  const { loading, error, allStationary } = allStationaryList;\r\n\r\n  const deviceHomeAll = useSelector((state) => state.deviceHomeAll);\r\n  const {\r\n    loading: loadingDeviceHomeAll,\r\n    error: errorDeviceHomeAll,\r\n    deviceType,\r\n    deviceBrand,\r\n    deviceCpu,\r\n  } = deviceHomeAll;\r\n  useEffect(() => {\r\n    dispatch(listDeviceHomeAll());\r\n    dispatch(getAllStationary());\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\".col-1\"></div>\r\n      <div className=\".col-2\">\r\n        <div>\r\n          <h1>Devices</h1>\r\n          {loadingDeviceHomeAll ? (\r\n            <LoadingBox></LoadingBox>\r\n          ) : errorDeviceHomeAll ? (\r\n            <MessageBox variant=\"danger\">{errorDeviceHomeAll}</MessageBox>\r\n          ) : (\r\n            <div>\r\n              <div class=\"row center\">\r\n                {deviceType.map((type) => (\r\n                  <div key={type.id} className=\"card\">\r\n                    <div className=\"card-body\">\r\n                      <h2>{type.name}</h2>\r\n                      <div className=\"row\">\r\n                        <div className=\"price\">\r\n                          <h5>{type.devices} pcs</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n              <div class=\"row center\">\r\n                {deviceCpu.map((cpu) => (\r\n                  <div\r\n                    key={cpu.deviceTypeId}\r\n                    className=\"card\"\r\n                    style={{ display: cpu.cpu !== \"0\" ? \"block\" : \"none\" }}\r\n                  >\r\n                    <div className=\"card-body\">\r\n                      <h2>\r\n                        {cpu.cpu}\r\n                        <br />\r\n                        {cpu.deviceType.name}\r\n                      </h2>\r\n                      <div className=\"row\">\r\n                        <div className=\"price\">\r\n                          <h5>{cpu.devices} pcs</h5>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      {/* <div class=\"vertical\"></div> */}\r\n      <div className=\".col-2\">\r\n        <div>\r\n          <h1>Stationary</h1>\r\n          {loading ? (\r\n            <LoadingBox></LoadingBox>\r\n          ) : error ? (\r\n            <MessageBox variant=\"danger\">{error}</MessageBox>\r\n          ) : (\r\n            <div class=\"row center\">\r\n              {/* {users.map((user) => (\r\n            <Users key={user.id} user={user}></Users>\r\n          ))} */}\r\n              {allStationary.map((stationary) => (\r\n                <StationaryAll\r\n                  key={stationary.id}\r\n                  stationary={stationary}\r\n                ></StationaryAll>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\".col-1\"></div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\LoadingBox.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\MessageBox.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\store.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\userRedures.js",["295","296","297","298","299","300","301","302","303","304","305","306","307","308","309","310","311","312","313","314","315"],"const {\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_SIGNIN_REQUEST,\r\n  USER_SIGNIN_SUCCESS,\r\n  USER_SIGNIN_FAIL,\r\n  USER_SIGNOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_UPDATE_RESET,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_RESET,\r\n  USER_DBTBCREATE_REQUEST,\r\n  USER_DBTBCREATE_SUCCESS,\r\n  USER_DBTBCREATE_FAIL,\r\n  USER_DETAILS_COMMON_REQUEST,\r\n  USER_DETAILS_COMMON_SUCCESS,\r\n  USER_DETAILS_COMMON_FAIL,\r\n  USER_DETAILS_COMMON_RESET,\r\n  USER_LIST_COMMON_REQUEST,\r\n  USER_LIST_COMMON_SUCCESS,\r\n  USER_LIST_COMMON_FAIL,\r\n  TABLE_LIST_COMMON_REQUEST,\r\n  TABLE_LIST_COMMON_SUCCESS,\r\n  TABLE_LIST_COMMON_FAIL,\r\n  TABLE_COLUMN_LIST_COMMON_REQUEST,\r\n  TABLE_COLUMN_LIST_COMMON_SUCCESS,\r\n  TABLE_COLUMN_LIST_COMMON_FAIL,\r\n  TABLE_CREATE_REQUEST,\r\n  TABLE_CREATE_SUCCESS,\r\n  TABLE_CREATE_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_DELETE_RESET,\r\n  USER_CREATE_REQUEST,\r\n  USER_CREATE_SUCCESS,\r\n  USER_CREATE_FAIL,\r\n  USER_CREATE_RESET,\r\n  USER_PASS_UPDATE_REQUEST,\r\n  USER_PASS_UPDATE_SUCCESS,\r\n  USER_PASS_UPDATE_FAIL,\r\n  USER_PASS_UPDATE_RESET,\r\n} = require(\"../constants/userConstants\");\r\n\r\nexport const usersListReducer = (\r\n  state = { loading: true, users: [] },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case USER_LIST_REQUEST:\r\n      return { loading: true };\r\n    case USER_LIST_SUCCESS:\r\n      return { loading: false, users: action.payload };\r\n    case USER_LIST_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userDetailsReducer = (\r\n  state = { user: {}, loading: true },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case USER_DETAILS_REQUEST:\r\n      return { loading: true };\r\n    case USER_DETAILS_SUCCESS:\r\n      return { loading: false, user: action.payload };\r\n    case USER_DETAILS_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_DETAILS_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userSigninReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_SIGNIN_REQUEST:\r\n      return { loading: true };\r\n    case USER_SIGNIN_SUCCESS:\r\n      return { loading: false, userInfo: action.payload };\r\n    case USER_SIGNIN_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_SIGNOUT:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userRegisterReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_REGISTER_REQUEST:\r\n      return { loading: true };\r\n    case USER_REGISTER_SUCCESS:\r\n      return { loading: false, userInfo: action.payload };\r\n    case USER_REGISTER_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userCreateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_CREATE_REQUEST:\r\n      return { loading: true };\r\n    case USER_CREATE_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case USER_CREATE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_CREATE_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userDeleteReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_DELETE_REQUEST:\r\n      return { loading: true };\r\n    case USER_DELETE_SUCCESS:\r\n      return { loading: false, success: true };\r\n    case USER_DELETE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_DELETE_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userUpdateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_UPDATE_REQUEST:\r\n      return { loading: true };\r\n    case USER_UPDATE_SUCCESS:\r\n      return { loading: false, success: true, user: action.payload };\r\n    case USER_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_UPDATE_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const userPassUpdateReducer = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case USER_PASS_UPDATE_REQUEST:\r\n      return { loading: true };\r\n    case USER_PASS_UPDATE_SUCCESS:\r\n      return { loading: false, success: true, user: action.payload };\r\n    case USER_PASS_UPDATE_FAIL:\r\n      return { loading: false, error: action.payload };\r\n    case USER_PASS_UPDATE_RESET:\r\n      return {};\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// export const userListReducer = (state = { loading: true }, action) => {\r\n//   switch (action.type) {\r\n//     case USER_LIST_REQUEST:\r\n//       return { loading: true };\r\n//     case USER_LIST_SUCCESS:\r\n//       return { loading: false, users: action.payload };\r\n//     case USER_LIST_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const userCommonListReducer = (state = { loading: true }, action) => {\r\n//   switch (action.type) {\r\n//     case USER_LIST_COMMON_REQUEST:\r\n//       return { loading: true };\r\n//     case USER_LIST_COMMON_SUCCESS:\r\n//       return { loading: false, users: action.payload };\r\n//     case USER_LIST_COMMON_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const tableListReducer = (state = { loading: true }, action) => {\r\n//   switch (action.type) {\r\n//     case TABLE_LIST_COMMON_REQUEST:\r\n//       return { loading: true };\r\n//     case TABLE_LIST_COMMON_SUCCESS:\r\n//       return { loading: false, tables: action.payload };\r\n//     case TABLE_LIST_COMMON_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const tableColumnListReducer = (state = { loading: true }, action) => {\r\n//   switch (action.type) {\r\n//     case TABLE_COLUMN_LIST_COMMON_REQUEST:\r\n//       return { loading: true };\r\n//     case TABLE_COLUMN_LIST_COMMON_SUCCESS:\r\n//       return { loading: false, tablesColumn: action.payload };\r\n//     case TABLE_COLUMN_LIST_COMMON_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const userCommonDetailsReducer = (state = { loading: true }, action) => {\r\n//   switch (action.type) {\r\n//     case USER_DETAILS_COMMON_REQUEST:\r\n//       return { loading: true };\r\n//     case USER_DETAILS_COMMON_SUCCESS:\r\n//       return { loading: false, user: action.payload };\r\n//     case USER_DETAILS_COMMON_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     case USER_DETAILS_COMMON_RESET:\r\n//       return {};\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const userUpdateReducer = (state = {}, action) => {\r\n//   switch (action.type) {\r\n//     case USER_UPDATE_REQUEST:\r\n//       return { loading: true };\r\n//     case USER_UPDATE_SUCCESS:\r\n//       return { loading: false, success: true };\r\n//     case USER_UPDATE_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     case USER_UPDATE_RESET:\r\n//       return {};\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const userDbTbCreateReducer = (state = {}, action) => {\r\n//   switch (action.type) {\r\n//     case USER_DBTBCREATE_REQUEST:\r\n//       return { loading: true };\r\n//     case USER_DBTBCREATE_SUCCESS:\r\n//       return { loading: false, success: true };\r\n//     case USER_DBTBCREATE_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// export const tableCreateReducer = (state = { loading: true }, action) => {\r\n//   switch (action.type) {\r\n//     case TABLE_CREATE_REQUEST:\r\n//       return { loading: true };\r\n//     case TABLE_CREATE_SUCCESS:\r\n//       return { loading: false, tableDetails: action.payload };\r\n//     case TABLE_CREATE_FAIL:\r\n//       return { loading: false, error: action.payload };\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\userConstants.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\userActions.js",["316","317","318","319","320","321","322","323","324"],"import Axios from \"axios\";\r\nimport {\r\n  USER_LIST_REQUEST,\r\n  USER_LIST_SUCCESS,\r\n  USER_LIST_FAIL,\r\n  USER_SIGNIN_REQUEST,\r\n  USER_SIGNIN_SUCCESS,\r\n  USER_SIGNIN_FAIL,\r\n  USER_SIGNOUT,\r\n  USER_REGISTER_REQUEST,\r\n  USER_REGISTER_SUCCESS,\r\n  USER_REGISTER_FAIL,\r\n  USER_UPDATE_PROFILE_REQUEST,\r\n  USER_UPDATE_PROFILE_SUCCESS,\r\n  USER_UPDATE_PROFILE_FAIL,\r\n  USER_UPDATE_REQUEST,\r\n  USER_UPDATE_SUCCESS,\r\n  USER_UPDATE_FAIL,\r\n  USER_DETAILS_REQUEST,\r\n  USER_DETAILS_SUCCESS,\r\n  USER_DETAILS_FAIL,\r\n  USER_DETAILS_COMMON_REQUEST,\r\n  USER_DETAILS_COMMON_SUCCESS,\r\n  USER_DETAILS_COMMON_FAIL,\r\n  USER_LIST_COMMON_REQUEST,\r\n  USER_LIST_COMMON_SUCCESS,\r\n  USER_LIST_COMMON_FAIL,\r\n  USER_DELETE_REQUEST,\r\n  USER_DELETE_SUCCESS,\r\n  USER_DELETE_FAIL,\r\n  USER_CREATE_REQUEST,\r\n  USER_CREATE_SUCCESS,\r\n  USER_CREATE_FAIL,\r\n  USER_PASS_UPDATE_REQUEST,\r\n  USER_PASS_UPDATE_SUCCESS,\r\n  USER_PASS_UPDATE_FAIL,\r\n} from \"../constants/userConstants\";\r\n\r\nexport const listUsers = () => async (dispatch, getState) => {\r\n  dispatch({\r\n    type: USER_LIST_REQUEST,\r\n  });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.get(\"/api/users\", {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n      },\r\n    });\r\n    dispatch({ type: USER_LIST_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: USER_LIST_FAIL, payload: message });\r\n  }\r\n};\r\n\r\nexport const detailsUser = (id) => async (dispatch, getState) => {\r\n  dispatch({ type: USER_DETAILS_REQUEST, payload: id });\r\n  // const {\r\n  //   userSignin: { userInfo },\r\n  // } = getState();\r\n  try {\r\n    const { data } = await Axios.get(\r\n      `/api/users/${id}`\r\n      // , {\r\n      //   headers: {\r\n      //     Authorization: `Bearer ${userInfo.token}`,\r\n      //   },\r\n      // }\r\n    );\r\n    dispatch({ type: USER_DETAILS_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: USER_DETAILS_FAIL, payload: message });\r\n  }\r\n};\r\n\r\nexport const signin = (email, password) => async (dispatch) => {\r\n  dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/signin\", {\r\n      email,\r\n      password,\r\n    });\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_SIGNIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\nexport const signout = () => (dispatch) => {\r\n  localStorage.removeItem(\"userInfo\");\r\n  dispatch({ type: USER_SIGNOUT });\r\n};\r\n\r\nexport const register = (name, email, password, dept) => async (dispatch) => {\r\n  dispatch({ type: USER_REGISTER_REQUEST, payload: { email, password } });\r\n  try {\r\n    const { data } = await Axios.post(\"/api/users/register\", {\r\n      name,\r\n      email,\r\n      password,\r\n      dept,\r\n    });\r\n    dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n    dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n    localStorage.setItem(\"userInfo\", JSON.stringify(data));\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_REGISTER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const createUser = (name, email, password, dept) => async (\r\n  dispatch,\r\n  getState\r\n) => {\r\n  dispatch({ type: USER_CREATE_REQUEST, payload: { email, password } });\r\n  try {\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    const { data } = await Axios.post(\r\n      \"/api/users/userCreate\",\r\n      {\r\n        name,\r\n        email,\r\n        password,\r\n        dept,\r\n      },\r\n      {\r\n        headers: { Authorization: `Bearer ${userInfo.token}` },\r\n      }\r\n    );\r\n    dispatch({ type: USER_CREATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: USER_CREATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const deleteUser = (userId) => async (dispatch, getState) => {\r\n  dispatch({ type: USER_DELETE_REQUEST, payload: userId });\r\n  try {\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    const { data } = await Axios.delete(`/api/users/${userId}`, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}` },\r\n    });\r\n    dispatch({ type: USER_DELETE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: USER_DELETE_FAIL, payload: message });\r\n  }\r\n};\r\n\r\nexport const updateUser = (user) => async (dispatch, getState) => {\r\n  dispatch({ type: USER_UPDATE_REQUEST, payload: user });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.put(`/api/users/${user.id}`, user, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}` },\r\n    });\r\n    dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: USER_UPDATE_FAIL, payload: message });\r\n  }\r\n};\r\n\r\nexport const updateUserPass = (user) => async (dispatch, getState) => {\r\n  dispatch({ type: USER_PASS_UPDATE_REQUEST, payload: user });\r\n  const {\r\n    userSignin: { userInfo },\r\n  } = getState();\r\n  try {\r\n    const { data } = await Axios.put(`/api/users/pass/${user.id}`, user, {\r\n      headers: { Authorization: `Bearer ${userInfo.token}` },\r\n    });\r\n    dispatch({ type: USER_PASS_UPDATE_SUCCESS, payload: data });\r\n  } catch (error) {\r\n    const message =\r\n      error.response && error.response.data.message\r\n        ? error.response.data.message\r\n        : error.message;\r\n    dispatch({ type: USER_PASS_UPDATE_FAIL, payload: message });\r\n  }\r\n};\r\n\r\n// export const listUsers = () => async (dispatch, getState) => {\r\n//   dispatch({ type: USER_LIST_REQUEST });\r\n//   try {\r\n//     const {\r\n//       userSignin: { userInfo },\r\n//     } = getState();\r\n//     const { data } = await Axios.get(\"/api/user\", {\r\n//       headers: {\r\n//         Authorization: `Bearer ${userInfo.token}`,\r\n//       },\r\n//     });\r\n//     dispatch({ type: USER_LIST_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message;\r\n//     dispatch({ type: USER_LIST_FAIL, payload: message });\r\n//   }\r\n// };\r\n\r\n// export const listCommonUsers = (dbName) => async (dispatch, getState) => {\r\n//   dispatch({ type: USER_LIST_COMMON_REQUEST });\r\n//   try {\r\n//     const {\r\n//       userSignin: { userInfo },\r\n//     } = getState();\r\n//     const { data } = await Axios.post(\r\n//       \"/api/userCommon\",\r\n//       { dbName },\r\n//       {\r\n//         headers: {\r\n//           Authorization: `Bearer ${userInfo.token}`,\r\n//         },\r\n//       }\r\n//     );\r\n//     dispatch({ type: USER_LIST_COMMON_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message;\r\n//     dispatch({ type: USER_LIST_COMMON_FAIL, payload: message });\r\n//   }\r\n// };\r\n\r\n// export const detailsCommonUser = (id, dbName) => async (dispatch, getState) => {\r\n//   dispatch({ type: USER_DETAILS_COMMON_REQUEST, payload: { id, dbName } });\r\n//   const {\r\n//     userSignin: { userInfo },\r\n//   } = getState();\r\n//   try {\r\n//     const { data } = await Axios.get(\r\n//       `/api/userdetailcommon/${id}`,\r\n//       { dbName },\r\n//       {\r\n//         headers: {\r\n//           Authorization: `Bearer ${userInfo.token}`,\r\n//         },\r\n//       }\r\n//     );\r\n//     dispatch({ type: USER_DETAILS_COMMON_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message;\r\n//     dispatch({ type: USER_DETAILS_COMMON_FAIL, payload: message });\r\n//   }\r\n// };\r\n\r\n// export const updateUser = (user) => async (dispatch, getState) => {\r\n//   dispatch({ type: USER_UPDATE_REQUEST, payload: user });\r\n//   const {\r\n//     userSignin: { userInfo },\r\n//   } = getState();\r\n//   try {\r\n//     const { data } = await Axios.put(`/api/users/${user._id}`, user, {\r\n//       headers: { Authorization: `Bearer ${userInfo.token}` },\r\n//     });\r\n//     dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n//   } catch (error) {\r\n//     const message =\r\n//       error.response && error.response.data.message\r\n//         ? error.response.data.message\r\n//         : error.message;\r\n//     dispatch({ type: USER_UPDATE_FAIL, payload: message });\r\n//   }\r\n// };\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SigninScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\RegisterScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserListScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\AdminRoute.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserEditScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateUserScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\stationaryReducers.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\stationaryConstants.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryTypeScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\stationaryActions.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateStationaryTypeScreen.js",["325"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { createStationaryType } from \"../actions/stationaryActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { STATIONAR_TYPE_CREATE_RESET } from \"../constants/stationaryConstants\";\r\nimport { USER_CREATE_RESET } from \"../constants/userConstants\";\r\n\r\nexport default function CreateStationaryTypeScreen(props) {\r\n  const [name, setName] = useState(\"\");\r\n  const [unit, setUnit] = useState(\"\");\r\n\r\n  const stationaryTypeCreate = useSelector(\r\n    (state) => state.stationaryTypeCreate\r\n  );\r\n  const { success, loading, error } = stationaryTypeCreate;\r\n\r\n  const dispatch = useDispatch();\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(createStationaryType(name, unit));\r\n  };\r\n  useEffect(() => {\r\n    if (success) {\r\n      dispatch({ type: STATIONAR_TYPE_CREATE_RESET });\r\n      props.history.push(`/stationarytype`);\r\n    }\r\n  }, [dispatch, props.history, success]);\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Create Stationary Type</h1>\r\n        </div>\r\n        {loading && <LoadingBox></LoadingBox>}\r\n        {error && <MessageBox variant=\"danger\">{error}</MessageBox>}\r\n        <div>\r\n          <label htmlFor=\"name\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"name\"\r\n            placeholder=\"Name\"\r\n            required\r\n            onChange={(e) => setName(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"Unit\">Unit</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"Unit\"\r\n            placeholder=\"Unit\"\r\n            required\r\n            onChange={(e) => setUnit(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label />\r\n          <button className=\"primary\" type=\"submit\">\r\n            Create Stationary Type\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryTypeEditScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\sourceReducers.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\sourceConstants.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SourceScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\sourceActions.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateSourceScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SourceEditScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryPurchaseScreen.js",["326","327","328"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { deleteStationaryType } from \"../actions/stationaryActions\";\r\nimport {\r\n  deleteStationaryPurchase,\r\n  detailsStationaryPurchase,\r\n  listStationaryPurchase,\r\n} from \"../actions/stationaryPurchaseActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  STATIONARY_ONE_PURCHASE_DETAILS_RESET,\r\n  STATIONARY_PURCHASE_DETAILS_RESET,\r\n} from \"../constants/stationaryPurchaseConstants\";\r\n\r\nexport default function StationaryPurchaseScreen(props) {\r\n  const { pageNumber = 1 } = useParams();\r\n  const stationaryPurchaseDelete = useSelector(\r\n    (state) => state.stationaryPurchaseDelete\r\n  );\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = stationaryPurchaseDelete;\r\n  const stationaryPurchaseDetails = useSelector(\r\n    (state) => state.stationaryPurchaseDetails\r\n  );\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    purchase,\r\n    page,\r\n    pages,\r\n  } = stationaryPurchaseDetails;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch({ type: STATIONARY_ONE_PURCHASE_DETAILS_RESET });\r\n    dispatch(detailsStationaryPurchase({ pageNumber }));\r\n  }, [dispatch, pageNumber, successDelete]);\r\n  const deleteHandler = (purchase) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      dispatch(deleteStationaryPurchase(purchase.id));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <h1>Stationary Purchase List</h1>\r\n        <Link to=\"/createpurchase\">\r\n          <button className=\"primary\"> Create Purchase</button>\r\n        </Link>\r\n      </div>\r\n\r\n      {loadingDelete && <LoadingBox></LoadingBox>}\r\n      {errorDelete && <MessageBox variant=\"danger\">{errorDelete}</MessageBox>}\r\n      {successDelete && (\r\n        <MessageBox variant=\"success\">User Deleted Successfully</MessageBox>\r\n      )}\r\n      {loadingPurchaseDetails ? (\r\n        <LoadingBox></LoadingBox>\r\n      ) : errorPurchaseDetailse ? (\r\n        <MessageBox variant=\"danger\">{errorPurchaseDetailse}</MessageBox>\r\n      ) : (\r\n        <>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Stationary Name</th>\r\n                <th>Quantity</th>\r\n                <th>Source</th>\r\n                <th>Purchase Date</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {purchase.map((purchase) => (\r\n                <tr key={purchase.id}>\r\n                  <td>{purchase.id}</td>\r\n                  <td>{purchase.StaType.name}</td>\r\n                  <td>{purchase.quantity}</td>\r\n                  <td>{purchase.SourceType.name}</td>\r\n                  <td>{purchase.purchaseDate}</td>\r\n                  <td>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() =>\r\n                        props.history.push(\r\n                          `/editstationarypurchase/${purchase.id}/edit`\r\n                        )\r\n                      }\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      disabled={purchase.quantity > 0 ? \"true\" : \"\"}\r\n                      onClick={() => deleteHandler(purchase)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"row center pagination\">\r\n            {[...Array(pages).keys()].map((x) => (\r\n              <Link\r\n                className={x + 1 === page ? \"active\" : \"\"}\r\n                key={x + 1}\r\n                to={`/stationarypurchase/pageNumber/${x + 1}`}\r\n              >\r\n                {x + 1}\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\stationaryPurchaseReducers.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\stationaryPurchaseConstants.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\stationaryPurchaseActions.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateStationaryPurchaseScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryPurchaseEditScreen.js",["329","330","331","332","333"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {\r\n  detailsStationaryType,\r\n  listStationaryType,\r\n  updateStationaryType,\r\n} from \"../actions/stationaryActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { STATIONAR_TYPE_UPDATE_RESET } from \"../constants/stationaryConstants\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport {\r\n  detailsStationaryPurchaseOne,\r\n  updateStationaryPurchase,\r\n} from \"../actions/stationaryPurchaseActions\";\r\nimport {\r\n  STATIONARY_ONE_PURCHASE_DETAILS_RESET,\r\n  STATIONARY_PURCHASE_DETAILS_RESET,\r\n  STATIONARY_PURCHASE_UPDATE_RESET,\r\n} from \"../constants/stationaryPurchaseConstants\";\r\n\r\nexport default function StationaryPurchaseEditScreen(props) {\r\n  const stPurchaseId = props.match.params.id;\r\n  const [name, setName] = useState(\"\");\r\n  const [StaTypeId, setNameId] = useState(0);\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [source, setSource] = useState(\"\");\r\n  const [SourceTypeId, setSourceId] = useState(0);\r\n  const [purchaseDate, setStartDate] = useState(null);\r\n\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const stationaryPurchaseOneDetails = useSelector(\r\n    (state) => state.stationaryPurchaseOneDetails\r\n  );\r\n  const { loading, error, onepurchase } = stationaryPurchaseOneDetails;\r\n\r\n  const stationaryTypeList = useSelector((state) => state.stationaryTypeList);\r\n  const {\r\n    loading: loadingStType,\r\n    error: errorStType,\r\n    allStationaryType,\r\n  } = stationaryTypeList;\r\n\r\n  const sourceList = useSelector((state) => state.sourceList);\r\n  const { loading: loadingSource, error: errorSource, allSource } = sourceList;\r\n\r\n  const statinaryPurchaseUpdate = useSelector(\r\n    (state) => state.statinaryPurchaseUpdate\r\n  );\r\n  const {\r\n    loading: loadingUpdae,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = statinaryPurchaseUpdate;\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: STATIONARY_PURCHASE_UPDATE_RESET });\r\n      props.history.push(\"/stationarypurchase\");\r\n    }\r\n    if (!onepurchase) {\r\n      dispatch(detailsStationaryPurchaseOne(stPurchaseId));\r\n      dispatch(listSource());\r\n      dispatch(listStationaryType());\r\n    } else {\r\n      setName(onepurchase.StaType.name);\r\n      setNameId(onepurchase.StaType.id);\r\n      setQuantity(onepurchase.quantity);\r\n      setSource(onepurchase.SourceType.name);\r\n      setSourceId(onepurchase.SourceType.id);\r\n      setStartDate(new Date(onepurchase.purchaseDate));\r\n    }\r\n    // dispatch({ type: STATIONARY_PURCHASE_DETAILS_RESET });\r\n  }, [dispatch, stPurchaseId, onepurchase, successUpdate, props.history]);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      updateStationaryPurchase(\r\n        stPurchaseId,\r\n        quantity,\r\n        purchaseDate,\r\n        EntryBy,\r\n        StaTypeId,\r\n        SourceTypeId\r\n      )\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Edit Stationary Purchase - {name}</h1>\r\n          {loadingUpdae && <LoadingBox></LoadingBox>}\r\n          {errorUpdate && (\r\n            <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>\r\n          )}\r\n        </div>\r\n        {loading ? (\r\n          <LoadingBox />\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              {loadingStType ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : errorStType ? (\r\n                <MessageBox variant=\"danger\">{errorStType}</MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"name\">Stationary Name</label>\r\n                  <select\r\n                    name=\"name\"\r\n                    onChange={(e) => setNameId(e.target.value)}\r\n                    // defaultValue=\r\n                  >\r\n                    <option value=\"\">{name}</option>\r\n                    {allStationaryType.map((sttype) => (\r\n                      <option key={sttype.id} value={sttype.id}>\r\n                        {sttype.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"quantity\">Quantity</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"quantity\"\r\n                placeholder=\"Quantity\"\r\n                value={quantity}\r\n                onChange={(e) => setQuantity(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              {loadingSource ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : errorSource ? (\r\n                <MessageBox variant=\"danger\">{error}</MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"source\">Source</label>\r\n                  <select\r\n                    name=\"source\"\r\n                    onChange={(e) => setSourceId(e.target.value)}\r\n                  >\r\n                    <option value=\"\">{source}</option>\r\n                    {allSource.map((source) => (\r\n                      <option key={source.id} value={source.id}>\r\n                        {source.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"date\">Date</label>\r\n              <DatePicker\r\n                selected={purchaseDate}\r\n                onChange={(date) => setStartDate(date)}\r\n                showTimeSelect\r\n                // timeFormat=\"hh:mm aa\"\r\n                // timeIntervals={15}\r\n                // timeCaption=\"Time\"\r\n                dateFormat=\"MM-dd-yyyy\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <button type=\"submit\" className=\"primary\">\r\n                Update\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateStationaryConsumeScreen.js",["334","335","336","337"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport { listStationaryType } from \"../actions/stationaryActions\";\r\nimport {\r\n  createStationaryAssign,\r\n  createStationaryPurchase,\r\n  getAllStationary,\r\n} from \"../actions/stationaryPurchaseActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  STATIONARY_ASSIGN_RESET,\r\n  STATIONARY_PURCHASE_CREATE_RESET,\r\n} from \"../constants/stationaryPurchaseConstants\";\r\nimport { listUsers } from \"../actions/userActions\";\r\n\r\nexport default function CreateStationaryConsumeScreen(props) {\r\n  const allStationaryList = useSelector((state) => state.allStationaryList);\r\n  const { loading, error, allStationary } = allStationaryList;\r\n  const userList = useSelector((state) => state.userList);\r\n  const { loading: userLoading, error: userError, users } = userList;\r\n\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const assignStationary = useSelector((state) => state.assignStationary);\r\n  const {\r\n    success: successCreate,\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n  } = assignStationary;\r\n  const [StaTypeId, setName] = useState(\"\");\r\n  const [quantity, setQuantity] = useState(0);\r\n  const [totalQuantity, setTotalQuantity] = useState(0);\r\n  const [assignUserId, setAssignUser] = useState(\"\");\r\n  const [assignDate, setAssignDate] = useState(new Date());\r\n\r\n  const dispatch = useDispatch();\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      createStationaryAssign(\r\n        quantity,\r\n        assignDate,\r\n        EntryBy,\r\n        assignUserId,\r\n        StaTypeId\r\n      )\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (successCreate) {\r\n      dispatch({ type: STATIONARY_ASSIGN_RESET });\r\n      props.history.push(`/stationarytotallist`);\r\n    }\r\n\r\n    dispatch(listUsers());\r\n    dispatch(getAllStationary());\r\n  }, [dispatch, successCreate, props.history]);\r\n\r\n  const setAll = (e) => {\r\n    const index = e.target.selectedIndex;\r\n    const optionElement = e.target.childNodes[index];\r\n    setName(optionElement.getAttribute(\"id\"));\r\n  };\r\n  const checkQnt = () => {\r\n    if (Number(quantity) > Number(totalQuantity)) {\r\n      alert(\"Please Reduce Amount!\");\r\n    }\r\n  };\r\n  console.log(totalQuantity);\r\n  console.log(quantity);\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Assign Stationary</h1>\r\n        </div>\r\n\r\n        {loadingCreate && <LoadingBox></LoadingBox>}\r\n        {errorCreate && <MessageBox variant=\"danger\">{errorCreate}</MessageBox>}\r\n        {successCreate && (\r\n          <MessageBox variant=\"success\">Assiged Successfully</MessageBox>\r\n        )}\r\n\r\n        {loading ? (\r\n          <LoadingBox></LoadingBox>\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"name\">Stationary Name</label>\r\n            <select\r\n              name=\"name\"\r\n              onChange={(e) => {\r\n                setTotalQuantity(e.target.value);\r\n                setAll(e);\r\n              }}\r\n            >\r\n              <option id=\"\" value=\"\">\r\n                Select Stationary Name\r\n              </option>\r\n              {allStationary.map((sttype) => (\r\n                <option key={sttype.id} id={sttype.id} value={sttype.total}>\r\n                  {sttype.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <label htmlFor=\"totalquantity\">Total Quantity</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"totalquantity\"\r\n            placeholder=\"Total Quantity\"\r\n            value={totalQuantity}\r\n            disabled=\"true\"\r\n            // onChange={(e) => setTotalQuantity(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"quantity\">Assign Quantity</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"quantity\"\r\n            placeholder=\"Assign Quantity\"\r\n            required\r\n            onkeypress={checkQnt()}\r\n            onChange={(e) => {\r\n              setQuantity(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n        {userLoading ? (\r\n          <LoadingBox></LoadingBox>\r\n        ) : userError ? (\r\n          <MessageBox variant=\"danger\">{userError}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"source\">Assign To</label>\r\n            <select\r\n              name=\"source\"\r\n              required\r\n              onChange={(e) => setAssignUser(e.target.value)}\r\n            >\r\n              <option value=\"\">Select User</option>\r\n              {users.map((user) => (\r\n                <option key={user.id} value={user.id}>\r\n                  {user.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <label htmlFor=\"date\">Date</label>\r\n          <DatePicker\r\n            selected={assignDate}\r\n            onChange={(date) => setAssignDate(date)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label />\r\n          <button\r\n            className=\"primary\"\r\n            type=\"submit\"\r\n            disabled={Number(quantity) > Number(totalQuantity) ? \"true\" : \"\"}\r\n          >\r\n            Assign Stationary\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryConsumeScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationarySearchScreen.js",["338"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { listStationaryType } from \"../actions/stationaryActions\";\r\nimport {\r\n  deleteStationaryAssign,\r\n  searchStationaryAssignOne,\r\n} from \"../actions/stationaryPurchaseActions\";\r\nimport { listUsers } from \"../actions/userActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  SEARCH_STATIONARY_ASSIGN_EDIT_RESET,\r\n  STATIONARY_TYPE_TOTAL_RESET,\r\n} from \"../constants/stationaryPurchaseConstants\";\r\nimport { USER_DETAILS_RESET } from \"../constants/userConstants\";\r\n\r\nexport default function StationarySearchScreen(props) {\r\n  const staid = props.match.params.staid;\r\n  const uid = props.match.params.uid;\r\n  const searchStationaryAssign = useSelector(\r\n    (state) => state.searchStationaryAssign\r\n  );\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    allStationary,\r\n  } = searchStationaryAssign;\r\n\r\n  const userList = useSelector((state) => state.userList);\r\n  const { loading: userLoading, error: userError, users } = userList;\r\n\r\n  const stationaryTypeList = useSelector((state) => state.stationaryTypeList);\r\n  const {\r\n    loading: StaTypeLoading,\r\n    error: StaTypeError,\r\n    allStationaryType,\r\n  } = stationaryTypeList;\r\n\r\n  const stationaryAssignDelete = useSelector(\r\n    (state) => state.stationaryAssignDelete\r\n  );\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = stationaryAssignDelete;\r\n\r\n  const [assignUserId, setAssignUser] = useState(\"\");\r\n  const [assignUserName, setAssignUserName] = useState(\"\");\r\n  const [staName, setstaName] = useState(\"\");\r\n  const [StaTypeId, setName] = useState(\"\");\r\n  // const [purchaseDate, setStartDate] = useState(new Date());\r\n  const dispatch = useDispatch();\r\n\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(searchStationaryAssignOne(assignUserId, StaTypeId));\r\n  };\r\n  useEffect(() => {\r\n    dispatch({ type: STATIONARY_TYPE_TOTAL_RESET });\r\n    dispatch({ type: SEARCH_STATIONARY_ASSIGN_EDIT_RESET });\r\n    dispatch({ type: USER_DETAILS_RESET });\r\n    dispatch(listUsers());\r\n    dispatch(listStationaryType());\r\n    // if (!allStationary) {\r\n    //   dispatch(searchStationaryAssignOne(uid, staid));\r\n    // }\r\n    // dispatch(detailsStationaryPurchase());\r\n  }, [allStationary, dispatch, staid, uid]);\r\n  const deleteHandler = (purchase) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      dispatch(deleteStationaryAssign(purchase.id));\r\n    }\r\n  };\r\n  const setUserNmae = (e) => {\r\n    const index = e.target.selectedIndex;\r\n    const optionElement = e.target.childNodes[index];\r\n    setAssignUserName(optionElement.getAttribute(\"id\"));\r\n  };\r\n\r\n  const setStaName = (e) => {\r\n    const index = e.target.selectedIndex;\r\n    const optionElement = e.target.childNodes[index];\r\n    setstaName(optionElement.getAttribute(\"sttypeName\"));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <h1>Search stationary for an user</h1>\r\n      </div>\r\n      <div>\r\n        <form onSubmit={submitHandler}>\r\n          <table className=\"table\">\r\n            <tr>\r\n              <td>\r\n                {userLoading ? (\r\n                  <LoadingBox></LoadingBox>\r\n                ) : userError ? (\r\n                  <MessageBox variant=\"danger\">{userError}</MessageBox>\r\n                ) : (\r\n                  <select\r\n                    name=\"source\"\r\n                    required\r\n                    onChange={(e) => {\r\n                      setAssignUser(e.target.value);\r\n                      setUserNmae(e);\r\n                    }}\r\n                  >\r\n                    <option value=\"\">\r\n                      &nbsp;&nbsp;&nbsp;&nbsp; Select User &nbsp;&nbsp;&nbsp;\r\n                    </option>\r\n                    {users.map((user) => (\r\n                      <option key={user.id} id={user.name} value={user.id}>\r\n                        {user.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                )}\r\n              </td>\r\n              <td>\r\n                {StaTypeLoading ? (\r\n                  <LoadingBox></LoadingBox>\r\n                ) : StaTypeError ? (\r\n                  <MessageBox variant=\"danger\">{StaTypeError}</MessageBox>\r\n                ) : (\r\n                  <select\r\n                    name=\"name\"\r\n                    required\r\n                    onChange={(e) => {\r\n                      setName(e.target.value);\r\n                      setStaName(e);\r\n                    }}\r\n                  >\r\n                    <option value=\"\">Select Stationary Name</option>\r\n                    {allStationaryType.map((sttype) => (\r\n                      <option\r\n                        key={sttype.id}\r\n                        sttypeName={sttype.name}\r\n                        value={sttype.id}\r\n                      >\r\n                        {sttype.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                )}\r\n              </td>\r\n              {/* <td>\r\n              <DatePicker\r\n                // selected={purchaseDate}\r\n                placeholderText=\"Select Date\"\r\n                onChange={(date) => setStartDate(date)}\r\n              />\r\n            </td> */}\r\n              <td>\r\n                {/* <Link to=\"/stationarysearch\"> */}\r\n                <button type=\"submit\" className=\"primary block\">\r\n                  Search\r\n                </button>\r\n                {/* </Link> */}\r\n              </td>\r\n            </tr>\r\n          </table>\r\n        </form>\r\n      </div>\r\n\r\n      {loadingDelete && <LoadingBox></LoadingBox>}\r\n      {errorDelete && <MessageBox variant=\"danger\">{errorDelete}</MessageBox>}\r\n      {successDelete && (\r\n        <MessageBox variant=\"success\">Deleted Successfully</MessageBox>\r\n      )}\r\n      {loadingPurchaseDetails ? (\r\n        // <LoadingBox>Lod</LoadingBox>\r\n        <h1></h1>\r\n      ) : errorPurchaseDetailse ? (\r\n        <MessageBox variant=\"danger\">{errorPurchaseDetailse}</MessageBox>\r\n      ) : (\r\n        <div>\r\n          <h1>\r\n            Search Result of User \"{assignUserName}\" and Stationary Name \"\r\n            {staName}\"\r\n          </h1>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Assign Quantity</th>\r\n                <th>Assign Date</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {allStationary.map((staAssign) => (\r\n                <tr key={staAssign.id}>\r\n                  <td>{staAssign.id}</td>\r\n                  <td>{staAssign.consumeQuantity}</td>\r\n                  <td>{staAssign.date}</td>\r\n                  <td>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() =>\r\n                        props.history.push(\r\n                          `/stationarysearchedit/${staAssign.id}/${staAssign.StaTypeId}/${staAssign.issueTo}/edit`\r\n                        )\r\n                      }\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() => deleteHandler(staAssign)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\StationaryConsumeSearchEditScreen.js",["339","340","341","342","343","344","345","346","347","348","349","350","351","352"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport { listStationaryType } from \"../actions/stationaryActions\";\r\nimport {\r\n  createStationaryAssign,\r\n  createStationaryPurchase,\r\n  getAllStationary,\r\n  searchStationaryAssignEditOne,\r\n  stationaryTypeTotalOne,\r\n  updateStationaryAssign,\r\n} from \"../actions/stationaryPurchaseActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  SEARCH_STATIONARY_ASSIGN_RESET,\r\n  STATIONARY_ASSIGN_RESET,\r\n  STATIONARY_ASSIGN_UPDATE_RESET,\r\n  STATIONARY_PURCHASE_CREATE_RESET,\r\n} from \"../constants/stationaryPurchaseConstants\";\r\nimport { detailsUser, listUsers } from \"../actions/userActions\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function StationaryConsumeSearchEditScreen(props) {\r\n  const staid = props.match.params.staid;\r\n  const id = props.match.params.id;\r\n  const uid = props.match.params.uid;\r\n\r\n  const userDetails = useSelector((state) => state.userDetails);\r\n  const { loading: userLoading, error: userError, user } = userDetails;\r\n  const stationaryTypeTotal = useSelector((state) => state.stationaryTypeTotal);\r\n  const { loading, error, oneStaTotal } = stationaryTypeTotal;\r\n\r\n  const searchStationaryAssignEdit = useSelector(\r\n    (state) => state.searchStationaryAssignEdit\r\n  );\r\n  const {\r\n    loading: loadingAssignQnt,\r\n    error: errorAssignQnt,\r\n    oneStaAssign,\r\n  } = searchStationaryAssignEdit;\r\n\r\n  const assignStationary = useSelector((state) => state.assignStationary);\r\n  const {\r\n    success: successCreate,\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n  } = assignStationary;\r\n\r\n  const stationaryAssignUpdate = useSelector(\r\n    (state) => state.stationaryAssignUpdate\r\n  );\r\n  const {\r\n    loading: loadingUpdae,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = stationaryAssignUpdate;\r\n\r\n  const [StaName, setName] = useState(\"\");\r\n  const [totalQuantity, setTotalQuantity] = useState(0);\r\n  const [uName, setUName] = useState(\"\");\r\n  const [consumeQuantity, setQuantity] = useState(0);\r\n  // const [date, setDate] = useState();\r\n  // const [issueBy, setIssueBy] = useState(0);\r\n  // const [issueTo, setIssueTo] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateStationaryAssign({ id: id, consumeQuantity }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    // dispatch({ type: SEARCH_STATIONARY_ASSIGN_RESET });\r\n    if (successUpdate) {\r\n      dispatch({ type: STATIONARY_ASSIGN_UPDATE_RESET });\r\n      window.location.href = \"/stationarysearch\";\r\n      // props.history.push(`/stationarysearch`);\r\n      // props.history.push(`/stationaryeditresultsearch/${uid}/${staid}`);\r\n    }\r\n    if (!oneStaTotal) {\r\n      dispatch(stationaryTypeTotalOne(staid));\r\n    } else {\r\n      setName(oneStaTotal[0].name);\r\n      setTotalQuantity(oneStaTotal[0].total);\r\n    }\r\n    if (!oneStaAssign) {\r\n      dispatch(searchStationaryAssignEditOne(id));\r\n    } else {\r\n      setQuantity(oneStaAssign.consumeQuantity);\r\n      // setDate(oneStaAssign.date);\r\n      // setIssueBy(oneStaAssign.issueBy);\r\n      // setIssueTo(oneStaAssign.issueTo);\r\n    }\r\n\r\n    if (!user) {\r\n      dispatch(detailsUser(uid));\r\n    } else {\r\n      setUName(user.name);\r\n    }\r\n  }, [\r\n    dispatch,\r\n    props.history,\r\n    oneStaTotal,\r\n    id,\r\n    staid,\r\n    user,\r\n    uid,\r\n    oneStaAssign,\r\n    successUpdate,\r\n  ]);\r\n\r\n  const checkQnt = () => {\r\n    if (Number(consumeQuantity) > Number(totalQuantity)) {\r\n      alert(\"Please Reduce Amount!\");\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        {userLoading ? (\r\n          <LoadingBox />\r\n        ) : userError ? (\r\n          <MessageBox variant=\"danger\">{userError}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <h1>Assigned Stationary to user - {uName}</h1>\r\n            </div>\r\n          </>\r\n        )}\r\n\r\n        {loadingUpdae && <LoadingBox></LoadingBox>}\r\n        {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>}\r\n        {loading ? (\r\n          <LoadingBox />\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <label htmlFor=\"staname\">Stationary Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"staname\"\r\n                placeholder=\"Stationary Name\"\r\n                value={StaName}\r\n                disabled=\"true\"\r\n                // onChange={(e) => setTotalQuantity(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"totalquantity\">Total Quantity</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"totalquantity\"\r\n                placeholder=\"Total Quantity\"\r\n                value={totalQuantity}\r\n                disabled=\"true\"\r\n                // onChange={(e) => setTotalQuantity(e.target.value)}\r\n              />\r\n            </div>\r\n          </>\r\n        )}\r\n        {loadingAssignQnt ? (\r\n          <LoadingBox />\r\n        ) : errorAssignQnt ? (\r\n          <MessageBox variant=\"danger\">{errorAssignQnt}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <label htmlFor=\"quantity\">Assigned Quantity</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"quantity\"\r\n                placeholder=\"Assign Quantity\"\r\n                value={consumeQuantity}\r\n                required\r\n                onChange={(e) => {\r\n                  setQuantity(e.target.value);\r\n                }}\r\n                onkeypress={totalQuantity ? checkQnt() : \"\"}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label />\r\n              <button\r\n                className=\"primary\"\r\n                type=\"submit\"\r\n                disabled={\r\n                  Number(consumeQuantity) > Number(totalQuantity) ? \"true\" : \"\"\r\n                }\r\n              >\r\n                Update Assigned Stationary\r\n              </button>\r\n              ;\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\StationaryAll.js",["353"],"import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default function StationaryAll(props) {\r\n  const { stationary } = props;\r\n  return (\r\n    <div key={stationary.id} className=\"card\">\r\n      <div className=\"card-body\">\r\n        {/* <Link to={`/product/${stationary.id}`}> */}\r\n        <h2>{stationary.name}</h2>\r\n        {/* </Link> */}\r\n        <div className=\"row\">\r\n          <div className=\"price\">\r\n            <h5>\r\n              {stationary.total} {stationary.unit}\r\n            </h5>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\UserPasswordEditScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\reducers\\deviceReducers.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\constants\\deviceConstants.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceTypeScreen.js",["354","355","356"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { deleteDeviceType, listDeviceType } from \"../actions/deviceActions\";\r\nimport {\r\n  deleteStationaryType,\r\n  listStationaryType,\r\n} from \"../actions/stationaryActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { DEVICE_TYPE_DETAILS_RESET } from \"../constants/deviceConstants\";\r\nimport { STATIONAR_TYPE_DETAILS_RESET } from \"../constants/stationaryConstants\";\r\n\r\nexport default function DeviceTypeListScreen(props) {\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const { loading, error, allDeviceType } = deviceTypeList;\r\n  const deviceTypeDelete = useSelector((state) => state.deviceTypeDelete);\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = deviceTypeDelete;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(listDeviceType());\r\n    dispatch({ type: DEVICE_TYPE_DETAILS_RESET });\r\n  }, [dispatch, successDelete]);\r\n  const deleteHandler = (deviceType) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      dispatch(deleteDeviceType(deviceType.id));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <h1>Device Type</h1>\r\n        <Link to=\"/createdevicetype\">\r\n          <button className=\"primary\"> Create Device Type</button>\r\n        </Link>\r\n      </div>\r\n\r\n      {loadingDelete && <LoadingBox></LoadingBox>}\r\n      {errorDelete && <MessageBox variant=\"danger\">{errorDelete}</MessageBox>}\r\n      {successDelete && (\r\n        <MessageBox variant=\"success\">\r\n          Device Type Deleted Successfully\r\n        </MessageBox>\r\n      )}\r\n      {loading ? (\r\n        <LoadingBox></LoadingBox>\r\n      ) : error ? (\r\n        <MessageBox variant=\"danger\">{error}</MessageBox>\r\n      ) : (\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th>ID</th>\r\n              <th>Name</th>\r\n              <th>Actions</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {allDeviceType.map((deviceType) => (\r\n              <tr key={deviceType.id}>\r\n                <td>{deviceType.id}</td>\r\n                <td>{deviceType.name}</td>\r\n                <td>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"small\"\r\n                    onClick={() =>\r\n                      props.history.push(\r\n                        `/devicetypeedit/${deviceType.id}/edit`\r\n                      )\r\n                    }\r\n                  >\r\n                    Edit\r\n                  </button>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"small\"\r\n                    onClick={() => deleteHandler(deviceType)}\r\n                  >\r\n                    Delete\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\actions\\deviceActions.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateDeviceTypeScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceTypeEditScreen.js",["357","358","359"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { detailsDeviceType, updateDeviceType } from \"../actions/deviceActions\";\r\nimport {\r\n  detailsStationaryType,\r\n  updateStationaryType,\r\n} from \"../actions/stationaryActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { DEVICE_TYPE_UPDATE_RESET } from \"../constants/deviceConstants\";\r\nimport { STATIONAR_TYPE_UPDATE_RESET } from \"../constants/stationaryConstants\";\r\n\r\nexport default function DeviceTypeEditScreen(props) {\r\n  const deviceTypeId = props.match.params.id;\r\n  const [name, setName] = useState(\"\");\r\n\r\n  const deviceTypeDetails = useSelector((state) => state.deviceTypeDetails);\r\n  const { loading, error, onedevicetype } = deviceTypeDetails;\r\n\r\n  const deviceTypeUpdate = useSelector((state) => state.deviceTypeUpdate);\r\n  const {\r\n    loading: loadingUpdae,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = deviceTypeUpdate;\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: DEVICE_TYPE_UPDATE_RESET });\r\n      props.history.push(\"/devicetype\");\r\n    }\r\n    if (!onedevicetype) {\r\n      dispatch(detailsDeviceType(deviceTypeId));\r\n    } else {\r\n      setName(onedevicetype.name);\r\n    }\r\n  }, [dispatch, successUpdate, props.history, deviceTypeId, onedevicetype]);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateDeviceType({ id: deviceTypeId, name }));\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Edit Device Type {name}</h1>\r\n          {loadingUpdae && <LoadingBox></LoadingBox>}\r\n          {errorUpdate && (\r\n            <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>\r\n          )}\r\n        </div>\r\n        {loading ? (\r\n          <LoadingBox />\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <label htmlFor=\"name\">Name</label>\r\n              <input\r\n                id=\"name\"\r\n                type=\"text\"\r\n                placeholder=\"Enter name\"\r\n                value={name}\r\n                onChange={(e) => setName(e.target.value)}\r\n              ></input>\r\n            </div>\r\n\r\n            <div>\r\n              <button type=\"submit\" className=\"primary\">\r\n                Update Device Type\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePurchaseScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateDevicePurchaseScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePurchaseEditScreen.js",[],"C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesScreen.js",["360","361","362","363"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport {\r\n  deleteDeviceProperties,\r\n  deleteDevicePurchase,\r\n  listDeviceProperties,\r\n  listDevicePurchase,\r\n} from \"../actions/deviceActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  DEVICE_ONE_PURCHASE_DETAILS_RESET,\r\n  DEVICE_PROPERTIES_DETAILS_RESET,\r\n  DEVICE_PROPERTIES_LIST_RESET,\r\n} from \"../constants/deviceConstants\";\r\n\r\nexport default function DevicePropertiesScreen(props) {\r\n  const { pageNumber = 1 } = useParams();\r\n  const devicePropertiesDelete = useSelector(\r\n    (state) => state.devicePropertiesDelete\r\n  );\r\n  const {\r\n    loading: loadingDelete,\r\n    error: errorDelete,\r\n    success: successDelete,\r\n  } = devicePropertiesDelete;\r\n  const devicePropertiesList = useSelector(\r\n    (state) => state.devicePropertiesList\r\n  );\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    properties,\r\n    page,\r\n    pages,\r\n  } = devicePropertiesList;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(listDeviceProperties({ pageNumber }));\r\n    dispatch({ type: DEVICE_PROPERTIES_DETAILS_RESET });\r\n    // dispatch({ type: DEVICE_PROPERTIES_LIST_RESET });\r\n  }, [dispatch, pageNumber, successDelete]);\r\n  const deleteHandler = (properties) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      dispatch(deleteDeviceProperties(properties.id));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <h1>Device Properties List</h1>\r\n        <Link to=\"/createdeviceproperties\">\r\n          <button className=\"primary\"> Create Properties</button>\r\n        </Link>\r\n      </div>\r\n\r\n      {loadingDelete && <LoadingBox></LoadingBox>}\r\n      {errorDelete && <MessageBox variant=\"danger\">{errorDelete}</MessageBox>}\r\n      {successDelete && (\r\n        <MessageBox variant=\"success\">\r\n          Device Properties Deleted Successfully\r\n        </MessageBox>\r\n      )}\r\n      {loadingPurchaseDetails ? (\r\n        <LoadingBox></LoadingBox>\r\n      ) : errorPurchaseDetailse ? (\r\n        <MessageBox variant=\"danger\">{errorPurchaseDetailse}</MessageBox>\r\n      ) : (\r\n        <>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>ID</th>\r\n                <th>Device Name</th>\r\n                <th>Serial</th>\r\n                <th>CPU</th>\r\n                <th>RAM(GB)</th>\r\n                <th>SSD(GB)</th>\r\n                <th>HDD(GB)</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {properties.map((pro) => (\r\n                <tr key={pro.id}>\r\n                  <td>{pro.id}</td>\r\n                  <td>{pro.devicePurchase.deviceType.name}</td>\r\n                  <td>{pro.devicePurchase.serial}</td>\r\n                  <td>{pro.cpu}</td>\r\n                  <td>{pro.ram}</td>\r\n                  <td>{pro.ssd}</td>\r\n                  <td>{pro.hdd}</td>\r\n                  <td>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() =>\r\n                        props.history.push(\r\n                          `/devicepropertiesview/${pro.id}/view`\r\n                        )\r\n                      }\r\n                    >\r\n                      View Details\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() =>\r\n                        props.history.push(`/devicepropertiesadd/${pro.id}/add`)\r\n                      }\r\n                    >\r\n                      Add\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() =>\r\n                        props.history.push(\r\n                          `/devicepropertiesremove/${pro.id}/remove`\r\n                        )\r\n                      }\r\n                    >\r\n                      Remove\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      onClick={() =>\r\n                        props.history.push(\r\n                          `/devicepropertiesedit/${pro.id}/edit`\r\n                        )\r\n                      }\r\n                    >\r\n                      Edit\r\n                    </button>\r\n                    <button\r\n                      type=\"button\"\r\n                      className=\"small\"\r\n                      // disabled={purchase.quantity > 0 ? \"true\" : \"\"}\r\n                      onClick={() => deleteHandler(pro)}\r\n                    >\r\n                      Delete\r\n                    </button>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n          <div className=\"row center pagination\">\r\n            {[...Array(pages).keys()].map((x) => (\r\n              <Link\r\n                className={x + 1 === page ? \"active\" : \"\"}\r\n                key={x + 1}\r\n                to={`/deviceproperties/pageNumber/${x + 1}`}\r\n              >\r\n                {x + 1}\r\n              </Link>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\CreateDevicePropertiesScreen.js",["364","365","366","367","368","369"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  DEVICE_PROPERTIES_CREATE_RESET,\r\n  DEVICE_PURCHASE_CREATE_RESET,\r\n} from \"../constants/deviceConstants\";\r\nimport {\r\n  listDeviceType,\r\n  createDevicePurchase,\r\n  createDeviceProperties,\r\n  listDevicePurchase,\r\n  getDeviceSerial,\r\n} from \"../actions/deviceActions\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport default function CreateDevicePropertiesScreen(props) {\r\n  const { pageNumber = 1 } = useParams();\r\n  const deviceSerial = useSelector((state) => state.deviceSerial);\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    allDeviceSerial,\r\n  } = deviceSerial;\r\n  // const devicePurchaseList = useSelector((state) => state.devicePurchaseList);\r\n  // const {\r\n  //   loading: loadingPurchaseDetails,\r\n  //   error: errorPurchaseDetailse,\r\n  //   purchase,\r\n  //   page,\r\n  //   pages,\r\n  // } = devicePurchaseList;\r\n\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const { loading, error, allDeviceType } = deviceTypeList;\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const [devicePurchaseId, setName] = useState(\"\");\r\n  const [deviceTypeId, setDeviceTypeId] = useState(\"\");\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [cpuspeed, setCpuspeed] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const [graphics, setGraphics] = useState(\"\");\r\n  const [ssd, setSsd] = useState(\"\");\r\n  const [hdd, setHdd] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [keyboard, setKeyboard] = useState(\"\");\r\n  const [mouse, setMouse] = useState(\"\");\r\n  const [os, setOs] = useState(\"\");\r\n  const devicePropertiesCreate = useSelector(\r\n    (state) => state.devicePropertiesCreate\r\n  );\r\n  const {\r\n    success: successCreate,\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n  } = devicePropertiesCreate;\r\n\r\n  const dispatch = useDispatch();\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      createDeviceProperties(\r\n        cpu,\r\n        cpuspeed,\r\n        ram,\r\n        graphics,\r\n        ssd,\r\n        hdd,\r\n        display,\r\n        keyboard,\r\n        mouse,\r\n        os,\r\n        EntryBy,\r\n        devicePurchaseId,\r\n        deviceTypeId\r\n      )\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    if (successCreate) {\r\n      dispatch({ type: DEVICE_PROPERTIES_CREATE_RESET });\r\n      props.history.push(`/deviceproperties`);\r\n    }\r\n\r\n    // dispatch(listDevicePurchase({ pageNumber }));\r\n    dispatch(listDeviceType());\r\n  }, [dispatch, successCreate, props.history]);\r\n  console.log(successCreate);\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Create Device Properties</h1>\r\n        </div>\r\n\r\n        {loadingCreate && <LoadingBox></LoadingBox>}\r\n        {errorCreate && <MessageBox variant=\"danger\">{errorCreate}</MessageBox>}\r\n        {loading ? (\r\n          <LoadingBox></LoadingBox>\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"dname\">Device Name</label>\r\n            <select\r\n              name=\"dname\"\r\n              required\r\n              onChange={(e) => {\r\n                setDeviceTypeId(e.target.value);\r\n                dispatch(getDeviceSerial(e.target.value));\r\n              }}\r\n            >\r\n              <option value=\"\">Select Device Name</option>\r\n              {allDeviceType.map((devicetype) => (\r\n                <option key={devicetype.id} value={devicetype.id}>\r\n                  {devicetype.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        {loadingPurchaseDetails ? (\r\n          // <LoadingBox></LoadingBox>\r\n          <h1>Please select Device Name</h1>\r\n        ) : errorPurchaseDetailse ? (\r\n          <MessageBox variant=\"danger\">{errorPurchaseDetailse}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"name\">Device Serial</label>\r\n            <select\r\n              name=\"name\"\r\n              required\r\n              onChange={(e) => setName(e.target.value)}\r\n            >\r\n              <option value=\"\">Select Device Serial</option>\r\n              {allDeviceSerial.map((devicetype) => (\r\n                <option key={devicetype.id} value={devicetype.id}>\r\n                  {devicetype.serial}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <label htmlFor=\"cpu\">CPU</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"cpu\"\r\n            placeholder=\"CPU\"\r\n            required\r\n            onChange={(e) => setCpu(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"cpuspeed\">Cpu speed(GHz)</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"cpuspeed\"\r\n            placeholder=\"Cpu speed(GHz)\"\r\n            required\r\n            onChange={(e) => setCpuspeed(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"ram\">RAM(GB)</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"ram\"\r\n            placeholder=\"RAM(GB)\"\r\n            required\r\n            onChange={(e) => setRam(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"graphics\">Graphics(GB)</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"graphics\"\r\n            placeholder=\"Graphics(GB)\"\r\n            required\r\n            onChange={(e) => setGraphics(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"ssd\">SSD(GB)</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"ssd\"\r\n            placeholder=\"SSD(GB)\"\r\n            required\r\n            onChange={(e) => setSsd(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"hdd\">HDD(GB)</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"hdd\"\r\n            placeholder=\"HDD(GB)\"\r\n            required\r\n            onChange={(e) => setHdd(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"display\">Display</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"display\"\r\n            placeholder=\"Display\"\r\n            required\r\n            onChange={(e) => setDisplay(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"keyboard\">Keyboard</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"keyboard\"\r\n            placeholder=\"Keyboard\"\r\n            required\r\n            onChange={(e) => setKeyboard(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"mouse\">Mouse</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"mouse\"\r\n            placeholder=\"Mouse\"\r\n            required\r\n            onChange={(e) => setMouse(e.target.value)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"os\">Operating System</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"os\"\r\n            placeholder=\"Operating System\"\r\n            required\r\n            onChange={(e) => setOs(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <div>\r\n          <label />\r\n          <button className=\"primary\" type=\"submit\">\r\n            Create Device Properties\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesEditScreen.js",["370","371","372","373","374"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport {\r\n  DEVICE_PROPERTIES_UPDATE_RESET,\r\n  DEVICE_PURCHASE_UPDATE_RESET,\r\n} from \"../constants/deviceConstants\";\r\nimport {\r\n  detailsDeviceProperties,\r\n  detailsDevicePurchaseOne,\r\n  getDeviceSerial,\r\n  listDeviceType,\r\n  updateDeviceProperties,\r\n  updateDevicePurchase,\r\n} from \"../actions/deviceActions\";\r\n\r\nexport default function DevicePropertiesEditScreen(props) {\r\n  const id = props.match.params.id;\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [serial, setDeviceSerial] = useState(\"\");\r\n  const [devicePurchaseId, setName] = useState(\"\");\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [cpuspeed, setCpuspeed] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const [graphics, setGraphics] = useState(\"\");\r\n  const [ssd, setSsd] = useState(\"\");\r\n  const [hdd, setHdd] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [keyboard, setKeyboard] = useState(\"\");\r\n  const [mouse, setMouse] = useState(\"\");\r\n  const [os, setOs] = useState(\"\");\r\n\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const devicePropertiesDetails = useSelector(\r\n    (state) => state.devicePropertiesDetails\r\n  );\r\n  const { loading, error, onePropertiesDetails } = devicePropertiesDetails;\r\n\r\n  const deviceSerial = useSelector((state) => state.deviceSerial);\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    allDeviceSerial,\r\n  } = deviceSerial;\r\n\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const {\r\n    loading: deviveLoading,\r\n    error: deviceError,\r\n    allDeviceType,\r\n  } = deviceTypeList;\r\n\r\n  const devicePropertiesUpdate = useSelector(\r\n    (state) => state.devicePropertiesUpdate\r\n  );\r\n  const {\r\n    loading: loadingUpdae,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = devicePropertiesUpdate;\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: DEVICE_PROPERTIES_UPDATE_RESET });\r\n      props.history.push(\"/deviceproperties\");\r\n    }\r\n    if (!onePropertiesDetails) {\r\n      dispatch(detailsDeviceProperties(id));\r\n      dispatch(listDeviceType());\r\n      dispatch(getDeviceSerial(id));\r\n    } else {\r\n      setDeviceName(onePropertiesDetails.devicePurchase.deviceType.name);\r\n      setDeviceSerial(onePropertiesDetails.devicePurchase.serial);\r\n      setName(onePropertiesDetails.devicePurchase.id);\r\n      setCpu(onePropertiesDetails.cpu);\r\n      setCpuspeed(onePropertiesDetails.cpuspeed);\r\n      setRam(onePropertiesDetails.ram);\r\n      setGraphics(onePropertiesDetails.graphics);\r\n      setSsd(onePropertiesDetails.ssd);\r\n      setHdd(onePropertiesDetails.hdd);\r\n      setDisplay(onePropertiesDetails.display);\r\n      setKeyboard(onePropertiesDetails.keyboard);\r\n      setMouse(onePropertiesDetails.mouse);\r\n      setOs(onePropertiesDetails.os);\r\n    }\r\n    // dispatch({ type: STATIONARY_PURCHASE_DETAILS_RESET });\r\n  }, [\r\n    dispatch,\r\n    devicePurchaseId,\r\n    successUpdate,\r\n    props.history,\r\n    onePropertiesDetails,\r\n    id,\r\n  ]);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      updateDeviceProperties(\r\n        id,\r\n        cpu,\r\n        cpuspeed,\r\n        ram,\r\n        graphics,\r\n        ssd,\r\n        hdd,\r\n        display,\r\n        keyboard,\r\n        mouse,\r\n        os,\r\n        EntryBy,\r\n        devicePurchaseId\r\n      )\r\n    );\r\n  };\r\n  console.log(serial);\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Edit Device Properties - {deviceName}</h1>\r\n          {loadingUpdae && <LoadingBox></LoadingBox>}\r\n          {errorUpdate && (\r\n            <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>\r\n          )}\r\n        </div>\r\n        {loading ? (\r\n          <LoadingBox />\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              {deviveLoading ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : deviceError ? (\r\n                <MessageBox variant=\"danger\">{deviceError}</MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"dname\">Device Name</label>\r\n                  <select\r\n                    name=\"dname\"\r\n                    onChange={(e) => {\r\n                      // setDeviceTypeId(e.target.value);\r\n                      dispatch(getDeviceSerial(e.target.value));\r\n                    }}\r\n                  >\r\n                    <option value=\"\">{deviceName}</option>\r\n                    {allDeviceType.map((devicetype) => (\r\n                      <option key={devicetype.id} value={devicetype.id}>\r\n                        {devicetype.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              {loadingPurchaseDetails ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : // <h1>Please select Device Name</h1>\r\n              errorPurchaseDetailse ? (\r\n                <MessageBox variant=\"danger\">\r\n                  {errorPurchaseDetailse}\r\n                </MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"name\">Device Serial</label>\r\n                  <select name=\"name\" onChange={(e) => setName(e.target.value)}>\r\n                    <option value=\"\" required>\r\n                      {serial}\r\n                    </option>\r\n                    {allDeviceSerial.map((devicepro) => (\r\n                      <option key={devicepro.id} value={devicepro.id}>\r\n                        {devicepro.serial}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"cpu\">CPU</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"cpu\"\r\n                placeholder=\"CPU\"\r\n                value={cpu}\r\n                required\r\n                onChange={(e) => setCpu(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"cpuspeed\">Cpu speed(GHz)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"cpuspeed\"\r\n                placeholder=\"Cpu speed(GHz)\"\r\n                value={cpuspeed}\r\n                required\r\n                onChange={(e) => setCpuspeed(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"ram\">RAM(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"ram\"\r\n                placeholder=\"RAM(GB)\"\r\n                value={ram}\r\n                required\r\n                onChange={(e) => setRam(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"graphics\">Graphics(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"graphics\"\r\n                placeholder=\"Graphics(GB)\"\r\n                required\r\n                value={graphics}\r\n                onChange={(e) => setGraphics(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"ssd\">SSD(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"ssd\"\r\n                placeholder=\"SSD(GB)\"\r\n                required\r\n                value={ssd}\r\n                onChange={(e) => setSsd(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"hdd\">HDD(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"hdd\"\r\n                placeholder=\"HDD(GB)\"\r\n                required\r\n                value={hdd}\r\n                onChange={(e) => setHdd(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"display\">Display</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"display\"\r\n                placeholder=\"Display\"\r\n                required\r\n                value={display}\r\n                onChange={(e) => setDisplay(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"keyboard\">Keyboard</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"keyboard\"\r\n                placeholder=\"Keyboard\"\r\n                required\r\n                value={keyboard}\r\n                onChange={(e) => setKeyboard(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"mouse\">Mouse</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"mouse\"\r\n                value={mouse}\r\n                placeholder=\"Mouse\"\r\n                required\r\n                onChange={(e) => setMouse(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"os\">Operating System</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"os\"\r\n                value={os}\r\n                placeholder=\"Operating System\"\r\n                required\r\n                onChange={(e) => setOs(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label />\r\n              <button className=\"primary\" type=\"submit\">\r\n                Update Device Properties\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesViewScreen.js",["375","376","377","378","379","380","381","382","383","384","385","386","387","388","389","390"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  DEVICE_PROPERTIES_CREATE_RESET,\r\n  DEVICE_PURCHASE_CREATE_RESET,\r\n} from \"../constants/deviceConstants\";\r\nimport {\r\n  listDeviceType,\r\n  createDevicePurchase,\r\n  createDeviceProperties,\r\n  listDevicePurchase,\r\n  getDeviceSerial,\r\n  detailsDeviceProperties,\r\n} from \"../actions/deviceActions\";\r\nimport { useParams } from \"react-router\";\r\n\r\nexport default function DevicePropertiesViewScreen(props) {\r\n  const id = props.match.params.id;\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [brand, setBrand] = useState(\"\");\r\n  const [warranty, setWarranty] = useState(null);\r\n  const [serial, setDeviceSerial] = useState(\"\");\r\n  const [devicePurchaseId, setName] = useState(\"\");\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [cpuspeed, setCpuspeed] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const [addram, setAddRam] = useState(\"\");\r\n  const [removeram, setRemoveRam] = useState(\"\");\r\n  const [graphics, setGraphics] = useState(\"\");\r\n  const [addgraphics, setAddGraphics] = useState(\"\");\r\n  const [removegraphics, setRemoveGraphics] = useState(\"\");\r\n  const [ssd, setSsd] = useState(\"\");\r\n  const [addssd, setAddSsd] = useState(\"\");\r\n  const [removessd, setRemoveSsd] = useState(\"\");\r\n  const [hdd, setHdd] = useState(\"\");\r\n  const [addhdd, setAddHdd] = useState(\"\");\r\n  const [removehdd, setRemoveHdd] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [adddisplay, setAddDisplay] = useState(\"\");\r\n  const [removedisplay, setRemoveDisplay] = useState(\"\");\r\n  const [keyboard, setKeyboard] = useState(\"\");\r\n  const [addkeyboard, setAddKeyboard] = useState(\"\");\r\n  const [removekeyboard, setRemoveKeyboard] = useState(\"\");\r\n  const [mouse, setMouse] = useState(\"\");\r\n  const [addmouse, setAddMouse] = useState(\"\");\r\n  const [removemouse, setRemoveMouse] = useState(\"\");\r\n  const [os, setOs] = useState(\"\");\r\n  const [addlan, setAddLan] = useState(\"\");\r\n  const [removelan, setRemoveLan] = useState(\"\");\r\n  const devicePropertiesDetails = useSelector(\r\n    (state) => state.devicePropertiesDetails\r\n  );\r\n  const { loading, error, onePropertiesDetails } = devicePropertiesDetails;\r\n\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n\r\n  // var msDiff = new Date(warranty).getTime() - new Date().getTime(); //Future date - current date\r\n  // var daysTill30June2035 = Math.floor(msDiff / (1000 * 60 * 60 * 24));\r\n  // console.log(\"diff\", daysTill30June2035);\r\n\r\n  const today = new Date();\r\n  const future = new Date(warranty); // remember this is equivalent to 06 01 2010\r\n  //dates in js are counted from 0, so 05 is june\r\n\r\n  function dateDiff(start, end) {\r\n    let years = 0,\r\n      months = 0,\r\n      days = 0;\r\n    // Day diffence. Trick is to use setDate(0) to get the amount of days\r\n    // from the previous month if the end day less than the start day.\r\n    if (end.getDate() < start.getDate()) {\r\n      months = -1;\r\n      let datePtr = new Date(end);\r\n      datePtr.setDate(0);\r\n      days = end.getDate() + (datePtr.getDate() - start.getDate());\r\n    } else {\r\n      days = end.getDate() - start.getDate();\r\n    }\r\n\r\n    if (\r\n      end.getMonth() < start.getMonth() ||\r\n      (end.getMonth() === start.getMonth() && end.getDate() < start.getDate())\r\n    ) {\r\n      years = -1;\r\n      months += end.getMonth() + (12 - start.getMonth());\r\n    } else {\r\n      months += end.getMonth() - start.getMonth();\r\n    }\r\n\r\n    years += end.getFullYear() - start.getFullYear();\r\n    console.log(`${years}y ${months}m ${days}d`);\r\n    return [years, months, days];\r\n  }\r\n  const all = dateDiff(today, future);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!onePropertiesDetails) {\r\n      dispatch(detailsDeviceProperties(id));\r\n    } else {\r\n      setDeviceName(onePropertiesDetails.devicePurchase.deviceType.name);\r\n      setDeviceSerial(onePropertiesDetails.devicePurchase.serial);\r\n      setBrand(onePropertiesDetails.devicePurchase.brand);\r\n      setWarranty(\r\n        new Date(\r\n          onePropertiesDetails.devicePurchase.warranty\r\n        ).toLocaleDateString()\r\n      );\r\n      setName(onePropertiesDetails.devicePurchase.id);\r\n      setCpu(onePropertiesDetails.cpu);\r\n      setCpuspeed(onePropertiesDetails.cpuspeed);\r\n      setRam(onePropertiesDetails.ram);\r\n      setAddRam(onePropertiesDetails.addram);\r\n      setRemoveRam(onePropertiesDetails.removeram);\r\n      setGraphics(onePropertiesDetails.graphics);\r\n      setAddGraphics(onePropertiesDetails.addgraphics);\r\n      setRemoveGraphics(onePropertiesDetails.removegraphics);\r\n      setSsd(onePropertiesDetails.ssd);\r\n      setAddSsd(onePropertiesDetails.addssd);\r\n      setRemoveSsd(onePropertiesDetails.removessd);\r\n      setHdd(onePropertiesDetails.hdd);\r\n      setAddHdd(onePropertiesDetails.addhdd);\r\n      setRemoveHdd(onePropertiesDetails.removehdd);\r\n      setAddDisplay(onePropertiesDetails.adddisplay);\r\n      setRemoveDisplay(onePropertiesDetails.removedisplay);\r\n      setDisplay(onePropertiesDetails.display);\r\n      setKeyboard(onePropertiesDetails.keyboard);\r\n      setAddKeyboard(onePropertiesDetails.addkeyboard);\r\n      setRemoveKeyboard(onePropertiesDetails.removekeyboard);\r\n      setMouse(onePropertiesDetails.mouse);\r\n      setAddMouse(onePropertiesDetails.addmouse);\r\n      setRemoveMouse(onePropertiesDetails.removemouse);\r\n      setOs(onePropertiesDetails.os);\r\n    }\r\n  }, [dispatch, props.history, id, onePropertiesDetails]);\r\n  console.log(all);\r\n  return (\r\n    <div>\r\n      <div>\r\n        {/* <button\r\n          type=\"button\"\r\n          className=\"primary small\"\r\n          onClick={() => props.history.push(`/deviceproperties`)}\r\n        >\r\n          Back to Properties\r\n        </button> */}\r\n      </div>\r\n      <div>\r\n        <h1>Details Properties of {deviceName}</h1>\r\n      </div>\r\n      {loading ? (\r\n        <LoadingBox></LoadingBox>\r\n      ) : error ? (\r\n        <MessageBox variant=\"danger\">{error}</MessageBox>\r\n      ) : (\r\n        <>\r\n          <div className=\"tab-content  top\">\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Device Name</div>\r\n                <div className=\"attribute-description col-2\"> {deviceName}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Device Serial </div>\r\n                <div className=\"attribute-description col-2\">{serial}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Device Brand </div>\r\n                <div className=\"attribute-description col-2\">{brand}</div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Device Warranty </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {warranty} ({all[0]}Years,\r\n                  {all[1]}Months,\r\n                  {all[2]}Days left from today)\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\"> CPU </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {cpu === \"0\" ? \"N/A\" : cpu} {cpuspeed === 0 ? \"\" : cpuspeed}\r\n                  {cpuspeed === 0 ? \"\" : \"GHz\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\"> RAM </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {ram === 0 ? \"N/A\" : ram} {ram === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">ADD RAM </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {addram === 0 ? \"N/A\" : addram} {addram === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove RAM </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {removeram === 0 ? \"N/A\" : removeram}{\" \"}\r\n                  {removeram === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Graphics </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {graphics === 0 ? \"N/A\" : graphics}{\" \"}\r\n                  {graphics === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Add Graphics </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {addgraphics === 0 ? \"N/A\" : addgraphics}{\" \"}\r\n                  {addgraphics === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove Graphics </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {removegraphics === 0 ? \"N/A\" : removegraphics}{\" \"}\r\n                  {removegraphics === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">SSD </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {\" \"}\r\n                  {ssd === 0 ? \"N/A\" : ssd}\r\n                  {ssd === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Add SSD </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {\" \"}\r\n                  {addssd === 0 ? \"N/A\" : addssd}\r\n                  {addssd === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove SSD </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {\" \"}\r\n                  {removessd === 0 ? \"N/A\" : removessd}\r\n                  {removessd === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">HDD </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {hdd === 0 ? \"N/A\" : hdd}\r\n                  {hdd === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Add HDD </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {addhdd === 0 ? \"N/A\" : addhdd}\r\n                  {addhdd === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove HDD </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {removehdd === 0 ? \"N/A\" : removehdd}\r\n                  {removehdd === 0 ? \"\" : \"GB\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Display </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {display === 0 ? \"N/A\" : display}\r\n                  {display === 0 ? \"\" : \"inch\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Add Display </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {adddisplay === 0 ? \"N/A\" : adddisplay}\r\n                  {adddisplay === 0 ? \"\" : \"inch\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove Display </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {removedisplay === 0 ? \"N/A\" : removedisplay}\r\n                  {removedisplay === 0 ? \"\" : \"inch\"}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Keyboard </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {keyboard === \"0\" ? \"N/A\" : keyboard}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Add Keyboard </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {addkeyboard === \"0\" ? \"N/A\" : addkeyboard}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove Keyboard </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {removekeyboard === \"0\" ? \"N/A\" : removekeyboard}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Mouse </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {mouse === \"0\" ? \"N/A\" : mouse}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Add Mouse </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {addmouse === \"0\" ? \"N/A\" : addmouse}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Remove Mouse </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {removemouse === \"0\" ? \"N/A\" : removemouse}\r\n                </div>\r\n              </div>\r\n            </div>\r\n            <div className=\"specs-item-wrapper\">\r\n              <div className=\"rownext row\">\r\n                <div className=\"attribute-heading col-1\">Operating System </div>\r\n                <div className=\"attribute-description col-2\">\r\n                  {os === \"0\" ? \"N/A\" : os}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          {/* <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                <th>Device Name</th>\r\n                <th>Brand</th>\r\n                <th>Serial</th>\r\n                <th>CPU</th>\r\n                <th>RAM(GB)</th>\r\n                <th>SSD(GB)</th>\r\n                <th>HDD(GB)</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              \r\n                <tr key={id}>\r\n                  <td>{deviceName}</td>\r\n                  <td>{pro.devicePurchase.deviceType.name}</td>\r\n                  <td>{pro.devicePurchase.serial}</td>\r\n                  <td>{pro.cpu}</td>\r\n                  <td>{pro.ram}</td>\r\n                  <td>{pro.ssd}</td>\r\n                  <td>{pro.hdd}</td>\r\n                  \r\n                </tr>\r\n              \r\n            </tbody>\r\n          </table> */}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceAssignScreen.js",["391","392","393","394"],"import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  deleteDeviceConsume,\r\n  getAllDeviceAssignList,\r\n  getDeviceSerial,\r\n  listDeviceType,\r\n  updateDevicePurchaseUnAssign,\r\n} from \"../actions/deviceActions\";\r\nimport { getAllStationary } from \"../actions/stationaryPurchaseActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  DEVICE_SERIAL_LIST_RESET,\r\n  DEVICE_TYPE_LIST_RESET,\r\n} from \"../constants/deviceConstants\";\r\n\r\nexport default function DeviceAssignScreen(props) {\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const {\r\n    loading: loadingDeviceType,\r\n    error: errorDeviceType,\r\n    allDeviceType,\r\n  } = deviceTypeList;\r\n  const deviceAssignList = useSelector((state) => state.deviceAssignList);\r\n  const {\r\n    loading: loadingDeviceAssignList,\r\n    error: errorDeviceAssignList,\r\n    getDeviceAssignList,\r\n  } = deviceAssignList;\r\n  const deviceConsumeDelete = useSelector((state) => state.deviceConsumeDelete);\r\n  const {\r\n    loading: loadingDeviceConsumeDelete,\r\n    error: errorDeviceConsumeDelete,\r\n    success: successDeviceConsumeDelete,\r\n  } = deviceConsumeDelete;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(listDeviceType());\r\n    // dispatch({ type: DEVICE_SERIAL_LIST_RESET });\r\n    // dispatch({ type: DEVICE_TYPE_LIST_RESET });\r\n  }, [dispatch]);\r\n  const deleteConsume = (con) => {\r\n    if (window.confirm(\"Are you sure?\")) {\r\n      dispatch(deleteDeviceConsume(con.id));\r\n      dispatch(updateDevicePurchaseUnAssign(con.devicePurchaseId));\r\n    }\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <div>\r\n          <h1>Device Assign List</h1>\r\n        </div>\r\n        {loadingDeviceType ? (\r\n          <LoadingBox></LoadingBox>\r\n        ) : errorDeviceType ? (\r\n          <MessageBox variant=\"danger\">{errorDeviceType}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"dname\">Select Device Name </label>\r\n            <select\r\n              name=\"dname\"\r\n              required\r\n              onChange={(e) => {\r\n                // setDeviceTypeId(e.target.value);\r\n                // dispatch(getDeviceSerial(e.target.value));\r\n                dispatch(getAllDeviceAssignList(e.target.value));\r\n              }}\r\n            >\r\n              <option value=\"\">Select Device Name</option>\r\n              {allDeviceType.map((devicetype) => (\r\n                <option key={devicetype.id} value={devicetype.id}>\r\n                  {devicetype.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        <Link to=\"/deviceassigntouser\">\r\n          <button className=\"primary\"> Assign Device</button>\r\n        </Link>\r\n      </div>\r\n      {loadingDeviceConsumeDelete && <LoadingBox></LoadingBox>}\r\n      {errorDeviceConsumeDelete && (\r\n        <MessageBox variant=\"danger\">{errorDeviceConsumeDelete}</MessageBox>\r\n      )}\r\n      {successDeviceConsumeDelete && (\r\n        <MessageBox variant=\"success\">\r\n          Device Unassigned Successfully\r\n        </MessageBox>\r\n      )}\r\n      {loadingDeviceAssignList ? (\r\n        // <LoadingBox></LoadingBox>\r\n        <h2 className=\"red\">Please select device name</h2>\r\n      ) : errorDeviceAssignList ? (\r\n        <MessageBox variant=\"danger\">{errorDeviceAssignList}</MessageBox>\r\n      ) : (\r\n        <>\r\n          <table className=\"table\">\r\n            <thead>\r\n              <tr>\r\n                {/* <th>ID</th> */}\r\n                <th>Device Name</th>\r\n                <th>Serial</th>\r\n                <th>Brand</th>\r\n                <th>CPU(GHz)</th>\r\n                <th>RAM(GB)</th>\r\n                <th>SSD(GB)</th>\r\n                <th>HDD(GB)</th>\r\n                <th>Display</th>\r\n                <th>Assigned User</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {getDeviceAssignList.map((assign) =>\r\n                assign.devicePurchases.map((pur) =>\r\n                  pur.deviceProperties.map((pro) =>\r\n                    pur.deviceConsumes.map((con) => (\r\n                      <tr key={pro.id}>\r\n                        {/* <td>{assign.id}</td> */}\r\n                        <td>{assign.name}</td>\r\n                        <td>{pur.serial}</td>\r\n                        <td>{pur.brand}</td>\r\n                        <td>\r\n                          {pro.cpu} ({pro.cpuspeed})\r\n                        </td>\r\n                        <td>{pro.ram}</td>\r\n                        <td>{pro.ssd}</td>\r\n                        <td>{pro.hdd}</td>\r\n                        <td>{pro.display}\"</td>\r\n                        <td>{con.User.name}</td>\r\n                        <td>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"small\"\r\n                            // disabled={purchase.quantity > 0 ? \"true\" : \"\"}\r\n                            onClick={() => {\r\n                              deleteConsume(con);\r\n                            }}\r\n                          >\r\n                            Unassign\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))\r\n                  )\r\n                )\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DeviceAssignToUserScreen.js",["395","396","397","398","399","400","401","402","403","404","405","406","407","408","409","410","411","412","413","414","415","416","417","418","419","420","421","422","423","424","425"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport {\r\n  DEVICE_CONSUME_CREATE_RESET,\r\n  DEVICE_DETAILS_LIST_RESET,\r\n  DEVICE_PROPERTIES_CREATE_RESET,\r\n  DEVICE_PURCHASE_ASSIGN_UPDATE_RESET,\r\n  DEVICE_PURCHASE_CREATE_RESET,\r\n  DEVICE_SERIAL_LIST_RESET,\r\n  DEVICE_TYPE_LIST_RESET,\r\n} from \"../constants/deviceConstants\";\r\nimport {\r\n  listDeviceType,\r\n  createDevicePurchase,\r\n  createDeviceProperties,\r\n  listDevicePurchase,\r\n  getDeviceSerial,\r\n  getDeviceDetails,\r\n  createDeviceConsume,\r\n  updateDevicePurchaseAssign,\r\n  getDeviceSerialWithoutAssign,\r\n} from \"../actions/deviceActions\";\r\nimport { useParams } from \"react-router\";\r\nimport { listUsers } from \"../actions/userActions\";\r\n\r\nexport default function DeviceAssignToUserScreen(props) {\r\n  const { pageNumber = 1 } = useParams();\r\n  const deviceSerial = useSelector((state) => state.deviceSerial);\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    allDeviceSerial,\r\n  } = deviceSerial;\r\n\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const { loading, error, allDeviceType } = deviceTypeList;\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const [devicePurchaseId, setName] = useState(\"\");\r\n  const [serial, setSerial] = useState(\"\");\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [cpuspeed, setCpuspeed] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const [graphics, setGraphics] = useState(\"\");\r\n  const [ssd, setSsd] = useState(\"\");\r\n  const [hdd, setHdd] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [keyboard, setKeyboard] = useState(\"\");\r\n  const [mouse, setMouse] = useState(\"\");\r\n  const [os, setOs] = useState(\"\");\r\n  const [assignUserId, setAssignUser] = useState(\"\");\r\n  const [assignDate, setAssignDate] = useState(new Date());\r\n  const deviceConsumeCreate = useSelector((state) => state.deviceConsumeCreate);\r\n  const {\r\n    success: successCreate,\r\n    loading: loadingCreate,\r\n    error: errorCreate,\r\n  } = deviceConsumeCreate;\r\n  const devicePurchaseAssignUpdate = useSelector(\r\n    (state) => state.devicePurchaseAssignUpdate\r\n  );\r\n  const {\r\n    success: successUpdate,\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n  } = devicePurchaseAssignUpdate;\r\n  const deviceDetails = useSelector((state) => state.deviceDetails);\r\n  const {\r\n    loading: loadingDeviceDetails,\r\n    error: errorDeviceDetails,\r\n    oneDeviceDetails,\r\n  } = deviceDetails;\r\n\r\n  const userList = useSelector((state) => state.userList);\r\n  const { loading: userLoading, error: userError, users } = userList;\r\n\r\n  const getSerial = (e) => {\r\n    const index = e.target.selectedIndex;\r\n    const optionElement = e.target.childNodes[index];\r\n    setSerial(optionElement.getAttribute(\"id\"));\r\n  };\r\n\r\n  const dispatch = useDispatch();\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(updateDevicePurchaseAssign(devicePurchaseId));\r\n    dispatch(\r\n      createDeviceConsume({\r\n        assignDate,\r\n        EntryBy,\r\n        assignUserId,\r\n        devicePurchaseId,\r\n      })\r\n    );\r\n  };\r\n  useEffect(() => {\r\n    if (successCreate && successUpdate) {\r\n      dispatch({ type: DEVICE_CONSUME_CREATE_RESET });\r\n      dispatch({ type: DEVICE_PURCHASE_ASSIGN_UPDATE_RESET });\r\n      props.history.push(`/deviceassign`);\r\n    }\r\n    // if (successUpdate) {\r\n    //   dispatch({ type: DEVICE_PURCHASE_ASSIGN_UPDATE_RESET });\r\n    // }\r\n    // dispatch({ type: DEVICE_TYPE_LIST_RESET });\r\n    // dispatch(listDevicePurchase({ pageNumber }));\r\n    // dispatch({ type: DEVICE_DETAILS_LIST_RESET });\r\n    dispatch(listUsers());\r\n    dispatch(listDeviceType());\r\n  }, [dispatch, successCreate, props.history, successUpdate]);\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Device Assign to User</h1>\r\n        </div>\r\n\r\n        {loadingCreate && <LoadingBox></LoadingBox>}\r\n        {errorCreate && <MessageBox variant=\"danger\">{errorCreate}</MessageBox>}\r\n        {loadingUpdate && <LoadingBox></LoadingBox>}\r\n        {errorUpdate && <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>}\r\n        {loading ? (\r\n          <LoadingBox></LoadingBox>\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"dname\">Device Name</label>\r\n            <select\r\n              name=\"dname\"\r\n              required\r\n              onChange={(e) => {\r\n                // setDeviceTypeId(e.target.value);\r\n                dispatch(getDeviceSerialWithoutAssign(e.target.value));\r\n              }}\r\n            >\r\n              <option value=\"\">Select Device Name</option>\r\n              {allDeviceType.map((devicetype) => (\r\n                <option key={devicetype.id} value={devicetype.id}>\r\n                  {devicetype.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        {loadingPurchaseDetails ? (\r\n          // <LoadingBox></LoadingBox>\r\n          <h1>Please select Device Name</h1>\r\n        ) : errorPurchaseDetailse ? (\r\n          <MessageBox variant=\"danger\">{errorPurchaseDetailse}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"name\">Device Serial</label>\r\n            <select\r\n              name=\"name\"\r\n              required\r\n              onChange={(e) => {\r\n                dispatch(getDeviceDetails(e.target.value));\r\n                setName(e.target.value);\r\n                getSerial(e);\r\n              }}\r\n            >\r\n              <option value=\"\">Select Device Serial</option>\r\n              {allDeviceSerial.map((devicetype) => (\r\n                <option\r\n                  key={devicetype.id}\r\n                  id={devicetype.serial}\r\n                  value={devicetype.id}\r\n                >\r\n                  {devicetype.serial}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        {loadingDeviceDetails ? (\r\n          // <LoadingBox></LoadingBox>\r\n          <p></p>\r\n        ) : errorDeviceDetails ? (\r\n          <MessageBox variant=\"danger\">{errorDeviceDetails}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              <label>\r\n                {serial === \"\" ? (\r\n                  <span className=\"red\">Please select device and serial</span>\r\n                ) : (\r\n                  <span className=\"green\">Device Summary of {serial}</span>\r\n                )}\r\n              </label>\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th>Brand</th>\r\n                    <th>CPU</th>\r\n                    <th>RAM</th>\r\n                    <th>HDD</th>\r\n                    <th>Display</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {oneDeviceDetails.map((devicedetails) => (\r\n                    <tr key={devicedetails.id}>\r\n                      <td>{devicedetails.brand}</td>\r\n                      <td>\r\n                        {devicedetails.deviceProperties.map(\r\n                          (devicepro) => devicepro.cpu\r\n                        )}\r\n                        (\r\n                        {devicedetails.deviceProperties.map(\r\n                          (devicepro) => devicepro.cpuspeed\r\n                        )}\r\n                        GHz)\r\n                      </td>\r\n                      <td>\r\n                        {devicedetails.deviceProperties.map(\r\n                          (devicepro) => devicepro.ram\r\n                        )}\r\n                        GB\r\n                      </td>\r\n                      <td>\r\n                        {devicedetails.deviceProperties.map(\r\n                          (devicepro) => devicepro.hdd\r\n                        )}\r\n                        GB\r\n                      </td>\r\n                      <td>\r\n                        {devicedetails.deviceProperties.map(\r\n                          (devicepro) => devicepro.display\r\n                        )}\r\n                        \"\r\n                      </td>\r\n                    </tr>\r\n                  ))}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </>\r\n        )}\r\n        {userLoading ? (\r\n          <LoadingBox></LoadingBox>\r\n        ) : userError ? (\r\n          <MessageBox variant=\"danger\">{userError}</MessageBox>\r\n        ) : (\r\n          <div>\r\n            <label htmlFor=\"source\">Assign To</label>\r\n            <select\r\n              name=\"source\"\r\n              required\r\n              onChange={(e) => setAssignUser(e.target.value)}\r\n            >\r\n              <option value=\"\">Select User</option>\r\n              {users.map((user) => (\r\n                <option key={user.id} value={user.id}>\r\n                  {user.name}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        )}\r\n        <div>\r\n          <label htmlFor=\"date\">Date</label>\r\n          <DatePicker\r\n            selected={assignDate}\r\n            onChange={(date) => setAssignDate(date)}\r\n          />\r\n        </div>\r\n        <div>\r\n          <label />\r\n          <button className=\"primary\" type=\"submit\">\r\n            Assign Device\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\components\\SearchBox.js",["426"],"import React, { useState } from \"react\";\r\n\r\nexport default function SearchBox(props) {\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    props.history.push(`/allsearchdevices/cpu/${cpu}`);\r\n  };\r\n  return (\r\n    <form className=\"search\" onSubmit={submitHandler}>\r\n      <div className=\"row\">\r\n        <input\r\n          type=\"text\"\r\n          name=\"q\"\r\n          id=\"q\"\r\n          onChange={(e) => {\r\n            setCpu(e.target.value);\r\n            setRam(e.target.value);\r\n          }}\r\n        />\r\n        <button className=\"primary\" type=\"submit\">\r\n          <i className=\"fa fa-search\"></i>\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SearchScreen.js",["427","428","429","430","431","432","433"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listDeviceSearch } from \"../actions/deviceActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { BsChevronDown } from \"react-icons/bs\"; //react-icon\r\nimport { DEVICE_PROPERTIES_DETAILS_RESET } from \"../constants/deviceConstants\";\r\n\r\nexport default function SearchScreen(props) {\r\n  const {\r\n    pageNumber = 1,\r\n    cpu = \"all\",\r\n    brand = \"all\",\r\n    username = \"all\",\r\n    devicetype = \"all\",\r\n    cpuspeed = 0,\r\n    graphics = \"all\",\r\n    ram = \"all\",\r\n    hdd = \"all\",\r\n    ssd = \"all\",\r\n    os = \"all\",\r\n    display = \"all\",\r\n    keyboard = \"\",\r\n    mouse = \"\",\r\n    assign = \"all\",\r\n  } = useParams();\r\n  const deviceSearch = useSelector((state) => state.deviceSearch);\r\n  const { loading, error, devices, length, page, pages } = deviceSearch;\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const {\r\n    loading: loadingDeviceType,\r\n    error: errorDeviceType,\r\n    allDeviceType,\r\n  } = deviceTypeList;\r\n  const deviceBrand = useSelector((state) => state.deviceBrand);\r\n  const {\r\n    loading: loadingDeviceBrand,\r\n    error: errorDeviceBrand,\r\n    allDeviceBrand,\r\n  } = deviceBrand;\r\n  const deviceProAll = useSelector((state) => state.deviceProAll);\r\n  const {\r\n    loading: loadingDeviceProAll,\r\n    error: errorDeviceProAll,\r\n    cpuPro,\r\n    ramPro,\r\n    graphicsPro,\r\n    ssdPro,\r\n    hddPro,\r\n    displayPro,\r\n    osPro,\r\n  } = deviceProAll;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch({ type: DEVICE_PROPERTIES_DETAILS_RESET });\r\n    dispatch(\r\n      listDeviceSearch({\r\n        pageNumber,\r\n        cpu: cpu !== \"all\" ? cpu : \"\",\r\n        ram: ram !== \"all\" ? ram : \"\",\r\n        brand: brand !== \"all\" ? brand : \"\",\r\n        devicetype: devicetype !== \"all\" ? devicetype : \"\",\r\n        graphics: graphics !== \"all\" ? graphics : \"\",\r\n        hdd: hdd !== \"all\" ? hdd : \"\",\r\n        ssd: ssd !== \"all\" ? ssd : \"\",\r\n        os: os !== \"all\" ? os : \"\",\r\n        display: display !== \"all\" ? display : \"\",\r\n        assign: assign !== \"all\" ? assign : \"\",\r\n      })\r\n    );\r\n  }, [\r\n    dispatch,\r\n    cpu,\r\n    pageNumber,\r\n    ram,\r\n    hdd,\r\n    ssd,\r\n    os,\r\n    display,\r\n    graphics,\r\n    brand,\r\n    devicetype,\r\n    assign,\r\n  ]);\r\n  const getFilterUrl = (filter) => {\r\n    const filterPage = filter.page || pageNumber;\r\n    const filterCpu = filter.cpu || cpu;\r\n    const filterBrand = filter.brand || brand;\r\n    const filterDevicetype = filter.devicetype || devicetype;\r\n    const filterUsername = filter.username || username;\r\n    const filterRam = filter.ram || ram;\r\n    const filterCpuspeed = filter.cpuspeed || cpuspeed;\r\n    const filterGraphics = filter.graphics || graphics;\r\n    const filterHdd = filter.hdd || hdd;\r\n    const filterSsd = filter.ssd || ssd;\r\n    const filterOs = filter.os || os;\r\n    const filterDisplay = filter.display || display;\r\n    const filterAssign = filter.assign || assign;\r\n    const filterMouse = filter.mouse || mouse;\r\n    return `/search/cpu/${filterCpu}/devicetype/${filterDevicetype}/brand/${filterBrand}/ram/${filterRam}/ssd/${filterSsd}/hdd/${filterHdd}/os/${filterOs}/graphics/${filterGraphics}/display/${filterDisplay}/assign/${filterAssign}/pageNumber/${filterPage}`;\r\n    // return `/search/cpu/${filterCpu}/devicetype/${filterDevicetype}/brand/${filterBrand}/ram/${filterRam}/graphics/${filterGraphics}/hdd/${filterHdd}/ssd/${filterSsd}/os/${filterOs}/display/${filterDisplay}/pageNumber/${filterPage}`;\r\n  };\r\n  const [pageNum, setPageNum] = useState(0);\r\n  const perPage = 6;\r\n  const pagesVisited = pageNum * perPage;\r\n  const pageCount = Math.ceil(length / perPage);\r\n\r\n  const changePage = ({ selected }) => {\r\n    setPageNum(selected);\r\n  };\r\n  return (\r\n    <div>\r\n      <div className=\"row top \">\r\n        <div>\r\n          {loading ? (\r\n            <LoadingBox></LoadingBox>\r\n          ) : error ? (\r\n            <MessageBox variant=\"danger\">{error}</MessageBox>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                color: \"#FF4500\",\r\n                fontWeight: \"bold\",\r\n                padding: \"0.5rem\",\r\n                fontSize: \"2rem\",\r\n              }}\r\n            >\r\n              {devices.length} Result\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          Sort by{\" \"}\r\n          <select\r\n            value={assign}\r\n            onChange={(e) => {\r\n              props.history.push(getFilterUrl({ assign: e.target.value }));\r\n            }}\r\n          >\r\n            <option value=\"\">Select One</option>\r\n            <option value=\"1\">Assigned</option>\r\n            <option value=\"0\">Not Assigned</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"row top\">\r\n        <div className=\"col-1 margin-right-0-5\">\r\n          {/* <h3>Device Type</h3> */}\r\n          {/* <h4></h4> */}\r\n          <div>\r\n            {loadingDeviceType ? (\r\n              <LoadingBox></LoadingBox>\r\n            ) : errorDeviceType ? (\r\n              <MessageBox variant=\"danger\">{errorDeviceType}</MessageBox>\r\n            ) : (\r\n              <Collapsible trigger={[\"Device Type\", <BsChevronDown />]}>\r\n                <ul>\r\n                  <Link\r\n                    className={\"all\" === devicetype ? \"active\" : \"\"}\r\n                    to={getFilterUrl({ devicetype: \"all\" })}\r\n                  >\r\n                    <li>Any</li>\r\n                  </Link>\r\n\r\n                  {allDeviceType.map((c) => (\r\n                    <Link\r\n                      className={c.name === devicetype ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ devicetype: c.name })}\r\n                    >\r\n                      <li key={c.name}>{c.name}</li>\r\n                    </Link>\r\n                  ))}\r\n                </ul>\r\n              </Collapsible>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {loadingDeviceBrand ? (\r\n              <LoadingBox></LoadingBox>\r\n            ) : errorDeviceBrand ? (\r\n              <MessageBox variant=\"danger\">{errorDeviceBrand}</MessageBox>\r\n            ) : (\r\n              <Collapsible trigger={[\"Device Brand\", <BsChevronDown />]}>\r\n                <ul>\r\n                  <Link\r\n                    className={\"all\" === brand ? \"active\" : \"\"}\r\n                    to={getFilterUrl({ brand: \"all\" })}\r\n                  >\r\n                    <li>Any</li>\r\n                  </Link>\r\n\r\n                  {allDeviceBrand.map((c) => (\r\n                    <Link\r\n                      className={c.brand === brand ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ brand: c.brand })}\r\n                    >\r\n                      <li key={c.brand}>{c.brand}</li>\r\n                    </Link>\r\n                  ))}\r\n                </ul>\r\n              </Collapsible>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {loadingDeviceProAll ? (\r\n              <LoadingBox></LoadingBox>\r\n            ) : errorDeviceProAll ? (\r\n              <MessageBox variant=\"danger\">{errorDeviceProAll}</MessageBox>\r\n            ) : (\r\n              <div>\r\n                <Collapsible trigger={[\"CPU\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === cpu ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ cpu: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {cpuPro.map((c) => (\r\n                      <Link\r\n                        className={c.cpu === cpu ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ cpu: c.cpu })}\r\n                      >\r\n                        <li\r\n                          key={c.cpu}\r\n                          style={{ display: c.cpu !== \"0\" ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.cpu}\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"RAM\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === ram ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ ram: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {ramPro.map((c) => (\r\n                      <Link\r\n                        className={`${c.ram}` === `${ram}` ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ ram: c.ram })}\r\n                      >\r\n                        <li\r\n                          key={c.ram}\r\n                          style={{ display: c.ram !== 0 ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.ram} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"ssd\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === ssd ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ ssd: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {ssdPro.map((c) => (\r\n                      <Link\r\n                        className={`${c.ssd}` === `${ssd}` ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ ssd: c.ssd })}\r\n                      >\r\n                        <li\r\n                          key={c.ssd}\r\n                          style={{ display: c.ssd !== 0 ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.ssd + c.addssd - c.removessd} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"hdd\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === hdd ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ hdd: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {hddPro.map((c) => (\r\n                      <Link\r\n                        className={`${c.hdd}` === `${hdd}` ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ hdd: c.hdd })}\r\n                      >\r\n                        <li\r\n                          key={c.hdd}\r\n                          style={{ display: c.hdd !== 0 ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.hdd} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"graphics\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === graphics ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ graphics: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {graphicsPro.map((c) => (\r\n                      <Link\r\n                        className={\r\n                          `${c.graphics}` === `${graphics}` ? \"active\" : \"\"\r\n                        }\r\n                        to={getFilterUrl({ graphics: c.graphics })}\r\n                      >\r\n                        <li\r\n                          key={c.graphics}\r\n                          style={{\r\n                            display: c.graphics !== 0 ? \"block\" : \"none\",\r\n                          }}\r\n                        >\r\n                          {c.graphics} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"display\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === display ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ display: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {displayPro.map((c) => (\r\n                      <Link\r\n                        className={\r\n                          `${c.display}` === `${display}` ? \"active\" : \"\"\r\n                        }\r\n                        to={getFilterUrl({ display: c.display })}\r\n                      >\r\n                        <li\r\n                          key={c.display}\r\n                          style={{\r\n                            display: c.display !== 0 ? \"block\" : \"none\",\r\n                          }}\r\n                        >\r\n                          {c.display}\"\"\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"os\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === os ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ os: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {osPro.map((c) => (\r\n                      <Link\r\n                        className={c.os === os ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ os: c.os })}\r\n                      >\r\n                        <li\r\n                          key={c.graphics}\r\n                          style={{ display: c.os !== \"0\" ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.os}\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-3\">\r\n          {loading ? (\r\n            <LoadingBox></LoadingBox>\r\n          ) : error ? (\r\n            <MessageBox variant=\"danger\">{error}</MessageBox>\r\n          ) : (\r\n            <>\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    {/* <th>ID</th> */}\r\n                    <th>ID</th>\r\n                    <th>Device Name</th>\r\n                    <th>Serial</th>\r\n                    <th>Brand</th>\r\n                    <th>CPU(GHz)</th>\r\n                    <th>RAM(GB)</th>\r\n                    <th>SSD(GB)</th>\r\n                    <th>HDD(GB)</th>\r\n                    <th>Graphics(GB)</th>\r\n                    <th>Display</th>\r\n                    <th>OS</th>\r\n                    <th>Assigned User</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {devices\r\n                    .slice(pagesVisited, pagesVisited + perPage)\r\n                    .map((device) => (\r\n                      <tr key={device.id}>\r\n                        <td>{device.devicePurchase.id}</td>\r\n                        <td>{device.devicePurchase.deviceType.name}</td>\r\n                        <td>{device.devicePurchase.serial}</td>\r\n                        <td>{device.devicePurchase.brand}</td>\r\n                        <td>\r\n                          {device.cpu} ({device.cpuspeed})\r\n                        </td>\r\n                        <td>{device.ram}</td>\r\n                        <td>{device.ssd}</td>\r\n                        <td>{device.hdd}</td>\r\n                        <td>{device.graphics}</td>\r\n                        <td>{device.display}\"</td>\r\n                        <td>{device.os}</td>\r\n                        <td>\r\n                          {device.devicePurchase.deviceConsumes.length !== 0\r\n                            ? device.devicePurchase.deviceConsumes.map(\r\n                                (con) => con.User.name\r\n                              )\r\n                            : \"Not Assigned**\"}\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"small\"\r\n                            onClick={() =>\r\n                              props.history.push(\r\n                                `/devicepropertiesview/${device.id}/view`\r\n                              )\r\n                            }\r\n                          >\r\n                            View Details\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n              {/* <ReactPaginate\r\n                previousLabel={\"Previous\"}\r\n                nextLabel={\"Next\"}\r\n                pageCount={pageCount}\r\n                onPageChange={changePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                previousLinkClassName={\"previousBttn\"}\r\n                nextLinkClassName={\"nextBttn\"}\r\n                disabledClassName={\"paginationDisabled\"}\r\n                activeClassName={\"paginationActive\"}\r\n              /> */}\r\n              <div className=\"row center pagination\">\r\n                {[...Array(pages).keys()].map((x) => (\r\n                  <Link\r\n                    className={x + 1 === page ? \"active\" : \"\"}\r\n                    key={x + 1}\r\n                    to={getFilterUrl({ page: x + 1 })}\r\n                  >\r\n                    {x + 1}\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\SearchAllDeviceScreen.js",["434","435","436","437","438","439","440","441"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { listDeviceSearch } from \"../actions/deviceActions\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport ReactPaginate from \"react-paginate\";\r\nimport Collapsible from \"react-collapsible\";\r\nimport { BsChevronDown } from \"react-icons/bs\"; //react-icon\r\nimport { DEVICE_PROPERTIES_DETAILS_RESET } from \"../constants/deviceConstants\";\r\n\r\nexport default function SearchAllDeviceScreen(props) {\r\n  const {\r\n    pageNumber = 1,\r\n    cpu = \"all\",\r\n    brand = \"all\",\r\n    username = \"all\",\r\n    devicetype = \"all\",\r\n    cpuspeed = 0,\r\n    graphics = \"all\",\r\n    ram = \"all\",\r\n    hdd = \"all\",\r\n    ssd = \"all\",\r\n    os = \"all\",\r\n    display = \"all\",\r\n    keyboard = \"\",\r\n    mouse = \"\",\r\n    assign = \"all\",\r\n  } = useParams();\r\n  const deviceSearch = useSelector((state) => state.deviceSearch);\r\n  const {\r\n    loading,\r\n    error,\r\n    allsearchdevices,\r\n    devices,\r\n    pagess,\r\n    page,\r\n    length,\r\n  } = deviceSearch;\r\n  const deviceProAll = useSelector((state) => state.deviceProAll);\r\n  const {\r\n    loading: loadingDeviceProAll,\r\n    error: errorDeviceProAll,\r\n    cpuPro,\r\n    ramPro,\r\n    graphicsPro,\r\n    ssdPro,\r\n    hddPro,\r\n    displayPro,\r\n    osPro,\r\n  } = deviceProAll;\r\n  const [pageNums, setPageNums] = useState(0);\r\n  const perPages = 6;\r\n  const pagesVisited = pageNums * perPages;\r\n  const pageCount = Math.ceil(length / perPages);\r\n\r\n  const changePage = ({ selected }) => {\r\n    setPageNums(selected);\r\n  };\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const {\r\n    loading: loadingDeviceType,\r\n    error: errorDeviceType,\r\n    allDeviceType,\r\n  } = deviceTypeList;\r\n  const deviceBrand = useSelector((state) => state.deviceBrand);\r\n  const {\r\n    loading: loadingDeviceBrand,\r\n    error: errorDeviceBrand,\r\n    allDeviceBrand,\r\n  } = deviceBrand;\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch({ type: DEVICE_PROPERTIES_DETAILS_RESET });\r\n    dispatch(\r\n      listDeviceSearch({\r\n        pageNumber,\r\n        cpu: cpu !== \"all\" ? cpu : \"\",\r\n        ram: ram !== \"all\" ? ram : \"\",\r\n        brand: brand !== \"all\" ? brand : \"\",\r\n        username: username !== \"all\" ? username : \"\",\r\n        devicetype: devicetype !== \"all\" ? devicetype : \"\",\r\n        cpuspeed,\r\n        graphics,\r\n        hdd,\r\n        ssd,\r\n        os,\r\n        display,\r\n        keyboard,\r\n        mouse,\r\n        assign: assign !== \"all\" ? assign : \"\",\r\n      })\r\n    );\r\n  }, [\r\n    dispatch,\r\n    cpu,\r\n    pageNumber,\r\n    ram,\r\n    cpuspeed,\r\n    hdd,\r\n    ssd,\r\n    os,\r\n    display,\r\n    keyboard,\r\n    mouse,\r\n    graphics,\r\n    brand,\r\n    devicetype,\r\n    username,\r\n    assign,\r\n  ]);\r\n  const getFilterUrl = (filter) => {\r\n    const filterPage = filter.page || pageNumber;\r\n    // const filterCpu = \"all\";\r\n    const filterCpu = filter.cpu || cpu;\r\n    const filterBrand = filter.brand || brand;\r\n    const filterDevicetype = filter.devicetype || devicetype;\r\n    const filterUsername = filter.username || username;\r\n    const filterRam = filter.ram || ram;\r\n    const filterCpuspeed = filter.cpuspeed || cpuspeed;\r\n    const filterGraphics = filter.graphics || graphics;\r\n    const filterHdd = filter.hdd || hdd;\r\n    const filterSsd = filter.ssd || ssd;\r\n    const filterOs = filter.os || os;\r\n    const filterDisplay = filter.display || display;\r\n    const filterKeyboard = filter.keyboard || keyboard;\r\n    const filterMouse = filter.mouse || mouse;\r\n    const filterAssign = filter.assign || assign;\r\n    return `/search/cpu/${filterCpu}/devicetype/${filterDevicetype}/brand/${filterBrand}/ram/${filterRam}/ssd/${filterSsd}/hdd/${filterHdd}/os/${filterOs}/graphics/${filterGraphics}/display/${filterDisplay}/assign/${filterAssign}/pageNumber/${filterPage}`;\r\n    // return `/search/cpu/${filterCpu}/devicetype/${filterDevicetype}/brand/${filterBrand}/ram/${filterRam}/graphics/${filterGraphics}/hdd/${filterHdd}/ssd/${filterSsd}/os/${filterOs}/display/${filterDisplay}/pageNumber/${filterPage}`;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row top \">\r\n        <div>\r\n          {loading ? (\r\n            <LoadingBox></LoadingBox>\r\n          ) : error ? (\r\n            <MessageBox variant=\"danger\">{error}</MessageBox>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                color: \"#FF4500\",\r\n                fontWeight: \"bold\",\r\n                padding: \"0.5rem\",\r\n                fontSize: \"2rem\",\r\n              }}\r\n            >\r\n              {allsearchdevices.length} Result\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div>\r\n          Sort by{\" \"}\r\n          <select\r\n            value={assign}\r\n            onChange={(e) => {\r\n              props.history.push(getFilterUrl({ assign: e.target.value }));\r\n            }}\r\n          >\r\n            <option value=\"\">Select One</option>\r\n            <option value=\"1\">Assigned</option>\r\n            <option value=\"0\">Not Assigned</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <div className=\"row top\">\r\n        <div className=\"col-1 margin-right-0-5\">\r\n          {/* <h3>Device Type</h3> */}\r\n          {/* <h4></h4> */}\r\n          <div>\r\n            {loadingDeviceType ? (\r\n              <LoadingBox></LoadingBox>\r\n            ) : errorDeviceType ? (\r\n              <MessageBox variant=\"danger\">{errorDeviceType}</MessageBox>\r\n            ) : (\r\n              <Collapsible trigger={[\"Device Type\", <BsChevronDown />]}>\r\n                <ul>\r\n                  <Link\r\n                    className={\"all\" === devicetype ? \"active\" : \"\"}\r\n                    to={getFilterUrl({ devicetype: \"all\" })}\r\n                  >\r\n                    <li>Any</li>\r\n                  </Link>\r\n\r\n                  {allDeviceType.map((c) => (\r\n                    <Link\r\n                      className={c.name === devicetype ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ devicetype: c.name })}\r\n                    >\r\n                      <li key={c.name}>{c.name}</li>\r\n                    </Link>\r\n                  ))}\r\n                </ul>\r\n              </Collapsible>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {loadingDeviceBrand ? (\r\n              <LoadingBox></LoadingBox>\r\n            ) : errorDeviceBrand ? (\r\n              <MessageBox variant=\"danger\">{errorDeviceBrand}</MessageBox>\r\n            ) : (\r\n              <Collapsible trigger={[\"Device Brand\", <BsChevronDown />]}>\r\n                <ul>\r\n                  <Link\r\n                    className={\"all\" === brand ? \"active\" : \"\"}\r\n                    to={getFilterUrl({ brand: \"all\" })}\r\n                  >\r\n                    <li>Any</li>\r\n                  </Link>\r\n\r\n                  {allDeviceBrand.map((c) => (\r\n                    <Link\r\n                      className={c.brand === brand ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ brand: c.brand })}\r\n                    >\r\n                      <li key={c.brand}>{c.brand}</li>\r\n                    </Link>\r\n                  ))}\r\n                </ul>\r\n              </Collapsible>\r\n            )}\r\n          </div>\r\n          <div>\r\n            {loadingDeviceProAll ? (\r\n              <LoadingBox></LoadingBox>\r\n            ) : errorDeviceProAll ? (\r\n              <MessageBox variant=\"danger\">{errorDeviceProAll}</MessageBox>\r\n            ) : (\r\n              <div>\r\n                <Collapsible trigger={[\"CPU\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === cpu ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ cpu: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {cpuPro.map((c) => (\r\n                      <Link\r\n                        className={c.cpu === cpu ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ cpu: c.cpu })}\r\n                      >\r\n                        <li\r\n                          key={c.cpu}\r\n                          style={{ display: c.cpu !== \"0\" ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.cpu}\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"RAM\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === ram ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ ram: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {ramPro.map((c) => (\r\n                      <Link\r\n                        className={`${c.ram}` === `${ram}` ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ ram: c.ram })}\r\n                      >\r\n                        <li\r\n                          key={c.ram}\r\n                          style={{ display: c.ram !== 0 ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.ram} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"ssd\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === ssd ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ ssd: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {ssdPro.map((c) => (\r\n                      <Link\r\n                        className={`${c.ssd}` === `${ssd}` ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ ssd: c.ssd })}\r\n                      >\r\n                        <li\r\n                          key={c.ssd}\r\n                          style={{ display: c.ssd !== 0 ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.ssd} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"hdd\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === hdd ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ hdd: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {hddPro.map((c) => (\r\n                      <Link\r\n                        className={`${c.hdd}` === `${hdd}` ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ hdd: c.hdd })}\r\n                      >\r\n                        <li\r\n                          key={c.hdd}\r\n                          style={{ display: c.hdd !== 0 ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.hdd} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"graphics\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === graphics ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ graphics: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {graphicsPro.map((c) => (\r\n                      <Link\r\n                        className={\r\n                          `${c.graphics}` === `${graphics}` ? \"active\" : \"\"\r\n                        }\r\n                        to={getFilterUrl({ graphics: c.graphics })}\r\n                      >\r\n                        <li\r\n                          key={c.graphics}\r\n                          style={{\r\n                            display: c.graphics !== 0 ? \"block\" : \"none\",\r\n                          }}\r\n                        >\r\n                          {c.graphics} GB\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"display\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === display ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ display: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {displayPro.map((c) => (\r\n                      <Link\r\n                        className={\r\n                          `${c.display}` === `${display}` ? \"active\" : \"\"\r\n                        }\r\n                        to={getFilterUrl({ display: c.display })}\r\n                      >\r\n                        <li\r\n                          key={c.display}\r\n                          style={{\r\n                            display: c.display !== 0 ? \"block\" : \"none\",\r\n                          }}\r\n                        >\r\n                          {c.display}\"\"\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n                <Collapsible trigger={[\"os\", <BsChevronDown />]}>\r\n                  <ul>\r\n                    <Link\r\n                      className={\"all\" === os ? \"active\" : \"\"}\r\n                      to={getFilterUrl({ os: \"all\" })}\r\n                    >\r\n                      <li>Any</li>\r\n                    </Link>\r\n\r\n                    {osPro.map((c) => (\r\n                      <Link\r\n                        className={c.os === os ? \"active\" : \"\"}\r\n                        to={getFilterUrl({ os: c.os })}\r\n                      >\r\n                        <li\r\n                          key={c.graphics}\r\n                          style={{ display: c.os !== \"0\" ? \"block\" : \"none\" }}\r\n                        >\r\n                          {c.os}\r\n                        </li>\r\n                      </Link>\r\n                    ))}\r\n                  </ul>\r\n                </Collapsible>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <div className=\"col-3\">\r\n          {loading ? (\r\n            <LoadingBox></LoadingBox>\r\n          ) : error ? (\r\n            <MessageBox variant=\"danger\">{error}</MessageBox>\r\n          ) : (\r\n            <>\r\n              <table className=\"table\">\r\n                <thead>\r\n                  <tr>\r\n                    {/* <th>ID</th> */}\r\n                    <th>ID</th>\r\n                    <th>Device Name</th>\r\n                    <th>Serial</th>\r\n                    <th>Brand</th>\r\n                    <th>CPU(GHz)</th>\r\n                    <th>RAM(GB)</th>\r\n                    <th>SSD(GB)</th>\r\n                    <th>HDD(GB)</th>\r\n                    <th>Graphics(GB)</th>\r\n                    <th>Display</th>\r\n                    <th>OS</th>\r\n                    <th>Assigned User</th>\r\n                    <th>Action</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {allsearchdevices\r\n                    .slice(pagesVisited, pagesVisited + perPages)\r\n                    .map((device) => (\r\n                      <tr key={device.id}>\r\n                        <td>{device.devicePurchase.id}</td>\r\n                        <td>{device.devicePurchase.deviceType.name}</td>\r\n                        <td>{device.devicePurchase.serial}</td>\r\n                        <td>{device.devicePurchase.brand}</td>\r\n                        <td>\r\n                          {device.cpu} ({device.cpuspeed})\r\n                        </td>\r\n                        <td>{device.ram}</td>\r\n                        <td>{device.ssd}</td>\r\n                        <td>{device.hdd}</td>\r\n                        <td>{device.graphics}</td>\r\n                        <td>{device.display}\"</td>\r\n                        <td>{device.os}</td>\r\n                        <td>\r\n                          {device.devicePurchase.deviceConsumes.length !== 0\r\n                            ? device.devicePurchase.deviceConsumes.map(\r\n                                (con) => con.User.name\r\n                              )\r\n                            : \"Not Assigned**\"}\r\n                        </td>\r\n                        <td>\r\n                          <button\r\n                            type=\"button\"\r\n                            className=\"small\"\r\n                            onClick={() =>\r\n                              props.history.push(\r\n                                `/devicepropertiesview/${device.id}/view`\r\n                              )\r\n                            }\r\n                          >\r\n                            View Details\r\n                          </button>\r\n                        </td>\r\n                      </tr>\r\n                    ))}\r\n                </tbody>\r\n              </table>\r\n              {/* <ReactPaginate\r\n                previousLabel={\"Previous\"}\r\n                nextLabel={\"Next\"}\r\n                pageCount={pageCount}\r\n                onPageChange={changePage}\r\n                containerClassName={\"paginationBttns\"}\r\n                previousLinkClassName={\"previousBttn\"}\r\n                nextLinkClassName={\"nextBttn\"}\r\n                disabledClassName={\"paginationDisabled\"}\r\n                activeClassName={\"paginationActive\"}\r\n              /> */}\r\n              <div className=\"row center pagination\">\r\n                {[...Array(pagess).keys()].map((x) => (\r\n                  <Link\r\n                    className={x + 1 === page ? \"active\" : \"\"}\r\n                    key={x + 1}\r\n                    to={getFilterUrl({ page: x + 1 })}\r\n                  >\r\n                    {x + 1}\r\n                  </Link>\r\n                ))}\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesAddScreen.js",["442","443","444","445","446","447","448","449","450","451","452","453","454","455","456","457","458","459","460","461","462","463","464","465","466","467","468","469","470","471","472"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport {\r\n  DEVICE_PROPERTIES_ADD_RESET,\r\n  DEVICE_PROPERTIES_UPDATE_RESET,\r\n  DEVICE_PURCHASE_UPDATE_RESET,\r\n} from \"../constants/deviceConstants\";\r\nimport {\r\n  addDeviceProperties,\r\n  detailsDeviceProperties,\r\n  detailsDevicePurchaseOne,\r\n  getDeviceSerial,\r\n  listDeviceType,\r\n  updateDeviceProperties,\r\n  updateDevicePurchase,\r\n} from \"../actions/deviceActions\";\r\n\r\nexport default function DevicePropertiesAddScreen(props) {\r\n  const id = props.match.params.id;\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [serial, setDeviceSerial] = useState(\"\");\r\n  const [devicePurchaseId, setName] = useState(\"\");\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [cpuspeed, setCpuspeed] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const [addram, setAddRam] = useState(\"\");\r\n  const [removeram, setRemoveRam] = useState(\"\");\r\n  const [graphics, setGraphics] = useState(\"\");\r\n  const [addgraphics, setAddGraphics] = useState(\"\");\r\n  const [removegraphics, setRemoveGraphics] = useState(\"\");\r\n  const [ssd, setSsd] = useState(\"\");\r\n  const [addssd, setAddSsd] = useState(\"\");\r\n  const [removessd, setRemoveSsd] = useState(\"\");\r\n  const [hdd, setHdd] = useState(\"\");\r\n  const [addhdd, setAddHdd] = useState(\"\");\r\n  const [removehdd, setRemoveHdd] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [keyboard, setKeyboard] = useState(\"\");\r\n  const [addkeyboard, setAddKeyboard] = useState(\"\");\r\n  const [removekeyboard, setRemoveKeyboard] = useState(\"\");\r\n  const [mouse, setMouse] = useState(\"\");\r\n  const [addmouse, setAddMouse] = useState(\"\");\r\n  const [removemouse, setRemoveMouse] = useState(\"\");\r\n  const [os, setOs] = useState(\"\");\r\n  const [addlan, setAddLan] = useState(\"\");\r\n  const [removelan, setRemoveLan] = useState(\"\");\r\n  const [adddisplay, setAddDisplay] = useState(\"\");\r\n  const [removedisplay, setRemoveDisplay] = useState(\"\");\r\n\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const devicePropertiesDetails = useSelector(\r\n    (state) => state.devicePropertiesDetails\r\n  );\r\n  const { loading, error, onePropertiesDetails } = devicePropertiesDetails;\r\n\r\n  const deviceSerial = useSelector((state) => state.deviceSerial);\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    allDeviceSerial,\r\n  } = deviceSerial;\r\n\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const {\r\n    loading: deviveLoading,\r\n    error: deviceError,\r\n    allDeviceType,\r\n  } = deviceTypeList;\r\n\r\n  const devicePropertiesAdd = useSelector((state) => state.devicePropertiesAdd);\r\n  const {\r\n    loading: loadingUpdae,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = devicePropertiesAdd;\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: DEVICE_PROPERTIES_ADD_RESET });\r\n      props.history.push(\"/deviceproperties\");\r\n    }\r\n    if (!onePropertiesDetails) {\r\n      dispatch(detailsDeviceProperties(id));\r\n      dispatch(listDeviceType());\r\n      dispatch(getDeviceSerial(id));\r\n    } else {\r\n      setDeviceName(onePropertiesDetails.devicePurchase.deviceType.name);\r\n      setDeviceSerial(onePropertiesDetails.devicePurchase.serial);\r\n      setName(onePropertiesDetails.devicePurchase.id);\r\n      // setCpu(onePropertiesDetails.cpu);\r\n      // setCpuspeed(onePropertiesDetails.cpuspeed);\r\n      setRam(onePropertiesDetails.ram);\r\n      // setAddRam(onePropertiesDetails.addram);\r\n      // setRemoveRam(onePropertiesDetails.removeram);\r\n      setGraphics(onePropertiesDetails.graphics);\r\n      // setAddGraphics(onePropertiesDetails.addgraphics);\r\n      // setRemoveGraphics(onePropertiesDetails.removegraphics);\r\n      setSsd(onePropertiesDetails.ssd);\r\n      // setAddSsd(onePropertiesDetails.addssd);\r\n      // setRemoveSsd(onePropertiesDetails.removessd);\r\n      setHdd(onePropertiesDetails.hdd);\r\n      // setAddHdd(onePropertiesDetails.addhdd);\r\n      // setRemoveHdd(onePropertiesDetails.removehdd);\r\n      setDisplay(onePropertiesDetails.display);\r\n      // setAddDisplay(onePropertiesDetails.adddisplay);\r\n      // setRemoveDisplay(onePropertiesDetails.removedisplay);\r\n      setKeyboard(onePropertiesDetails.keyboard);\r\n      // setAddKeyboard(onePropertiesDetails.addkeyboard);\r\n      // setRemoveKeyboard(onePropertiesDetails.removekeyboard);\r\n      setMouse(onePropertiesDetails.mouse);\r\n      // setAddMouse(onePropertiesDetails.addmouse);\r\n      // setRemoveMouse(onePropertiesDetails.removemouse);\r\n      // setAddLan(onePropertiesDetails.addlan);\r\n      // setRemoveLan(onePropertiesDetails.removelan);\r\n      setOs(onePropertiesDetails.os);\r\n    }\r\n    // dispatch({ type: STATIONARY_PURCHASE_DETAILS_RESET });\r\n  }, [\r\n    dispatch,\r\n    devicePurchaseId,\r\n    successUpdate,\r\n    props.history,\r\n    onePropertiesDetails,\r\n    id,\r\n  ]);\r\n  const nram = Number(ram) + Number(addram);\r\n  const nssd = Number(ssd) + Number(addssd);\r\n  const nhdd = Number(hdd) + Number(addhdd);\r\n  const ngraphics = Number(graphics) + Number(addgraphics);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      addDeviceProperties(\r\n        id,\r\n        nram,\r\n        addram,\r\n        ngraphics,\r\n        addgraphics,\r\n        nssd,\r\n        addssd,\r\n        nhdd,\r\n        addhdd,\r\n        adddisplay,\r\n        addkeyboard,\r\n        addmouse,\r\n        addlan,\r\n        EntryBy,\r\n        devicePurchaseId\r\n      )\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>ADD Device Properties - {deviceName}</h1>\r\n          {loadingUpdae && <LoadingBox></LoadingBox>}\r\n          {errorUpdate && (\r\n            <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>\r\n          )}\r\n        </div>\r\n        {loading ? (\r\n          <LoadingBox />\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              {deviveLoading ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : deviceError ? (\r\n                <MessageBox variant=\"danger\">{deviceError}</MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"dname\">Device Name</label>\r\n                  <select\r\n                    name=\"dname\"\r\n                    onChange={(e) => {\r\n                      // setDeviceTypeId(e.target.value);\r\n                      dispatch(getDeviceSerial(e.target.value));\r\n                    }}\r\n                  >\r\n                    <option value=\"\">{deviceName}</option>\r\n                    {allDeviceType.map((devicetype) => (\r\n                      <option key={devicetype.id} value={devicetype.id}>\r\n                        {devicetype.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              {loadingPurchaseDetails ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : // <h1>Please select Device Name</h1>\r\n              errorPurchaseDetailse ? (\r\n                <MessageBox variant=\"danger\">\r\n                  {errorPurchaseDetailse}\r\n                </MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"name\">Device Serial</label>\r\n                  <select name=\"name\" onChange={(e) => setName(e.target.value)}>\r\n                    <option value=\"\" required>\r\n                      {serial}\r\n                    </option>\r\n                    {allDeviceSerial.map((devicepro) => (\r\n                      <option key={devicepro.id} value={devicepro.id}>\r\n                        {devicepro.serial}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"ram\">ADD RAM(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"ram\"\r\n                placeholder=\"RAM(GB)\"\r\n                value={addram}\r\n                // required\r\n                onChange={(e) => setAddRam(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"graphics\">ADD Graphics(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"graphics\"\r\n                placeholder=\"Graphics(GB)\"\r\n                // required\r\n                value={addgraphics}\r\n                onLoad={(e) => setAddGraphics(0)}\r\n                onChange={(e) => setAddGraphics(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"ssd\">ADD SSD(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"ssd\"\r\n                placeholder=\"SSD(GB)\"\r\n                // required\r\n                value={addssd}\r\n                onLoad={(e) => setAddSsd(0)}\r\n                onChange={(e) => setAddSsd(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"hdd\">ADD HDD(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"hdd\"\r\n                placeholder=\"HDD(GB)\"\r\n                // required\r\n                value={addhdd}\r\n                onLoad={(e) => setAddHdd(0)}\r\n                onChange={(e) => setAddHdd(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"display\">ADD Display</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"display\"\r\n                placeholder=\"Display\"\r\n                // required\r\n                value={adddisplay}\r\n                onChange={(e) => setAddDisplay(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"keyboard\">ADD Keyboard</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"keyboard\"\r\n                placeholder=\"Keyboard\"\r\n                // required\r\n                value={addkeyboard}\r\n                onChange={(e) => setAddKeyboard(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"mouse\">ADD Mouse</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"mouse\"\r\n                value={addmouse}\r\n                placeholder=\"Mouse\"\r\n                // required\r\n                onChange={(e) => setAddMouse(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"mouse\">ADD LAN Card</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"lan\"\r\n                value={addlan}\r\n                placeholder=\"LAN\"\r\n                // required\r\n                onChange={(e) => setAddLan(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label />\r\n              <button className=\"primary\" type=\"submit\">\r\n                ADD Device Properties\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\Asif\\github\\LGED Inventory\\Frontend\\frontend\\src\\screens\\DevicePropertiesRemoveScreen.js",["473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501","502","503","504","505"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport LoadingBox from \"../components/LoadingBox\";\r\nimport MessageBox from \"../components/MessageBox\";\r\nimport { listSource } from \"../actions/sourceActions\";\r\nimport {\r\n  DEVICE_PROPERTIES_ADD_RESET,\r\n  DEVICE_PROPERTIES_REMOVE_RESET,\r\n  DEVICE_PROPERTIES_UPDATE_RESET,\r\n  DEVICE_PURCHASE_UPDATE_RESET,\r\n} from \"../constants/deviceConstants\";\r\nimport {\r\n  addDeviceProperties,\r\n  detailsDeviceProperties,\r\n  detailsDevicePurchaseOne,\r\n  getDeviceSerial,\r\n  listDeviceType,\r\n  removeDeviceProperties,\r\n  updateDeviceProperties,\r\n  updateDevicePurchase,\r\n} from \"../actions/deviceActions\";\r\n\r\nexport default function DevicePropertiesRemoveScreen(props) {\r\n  const id = props.match.params.id;\r\n  const [deviceName, setDeviceName] = useState(\"\");\r\n  const [serial, setDeviceSerial] = useState(\"\");\r\n  const [devicePurchaseId, setName] = useState(\"\");\r\n  const [cpu, setCpu] = useState(\"\");\r\n  const [cpuspeed, setCpuspeed] = useState(\"\");\r\n  const [ram, setRam] = useState(\"\");\r\n  const [addram, setAddRam] = useState(\"\");\r\n  const [removeram, setRemoveRam] = useState(\"\");\r\n  const [graphics, setGraphics] = useState(\"\");\r\n  const [addgraphics, setAddGraphics] = useState(\"\");\r\n  const [removegraphics, setRemoveGraphics] = useState(\"\");\r\n  const [ssd, setSsd] = useState(\"\");\r\n  const [addssd, setAddSsd] = useState(\"\");\r\n  const [removessd, setRemoveSsd] = useState(\"\");\r\n  const [hdd, setHdd] = useState(\"\");\r\n  const [addhdd, setAddHdd] = useState(\"\");\r\n  const [removehdd, setRemoveHdd] = useState(\"\");\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [keyboard, setKeyboard] = useState(\"\");\r\n  const [addkeyboard, setAddKeyboard] = useState(\"\");\r\n  const [removekeyboard, setRemoveKeyboard] = useState(\"\");\r\n  const [mouse, setMouse] = useState(\"\");\r\n  const [addmouse, setAddMouse] = useState(\"\");\r\n  const [removemouse, setRemoveMouse] = useState(\"\");\r\n  const [os, setOs] = useState(\"\");\r\n  const [addlan, setAddLan] = useState(\"\");\r\n  const [removelan, setRemoveLan] = useState(\"\");\r\n  const [adddisplay, setAddDisplay] = useState(\"\");\r\n  const [removedisplay, setRemoveDisplay] = useState(\"\");\r\n\r\n  const userSignin = useSelector((state) => state.userSignin);\r\n  const { userInfo } = userSignin;\r\n  const EntryBy = userInfo.id;\r\n  const devicePropertiesDetails = useSelector(\r\n    (state) => state.devicePropertiesDetails\r\n  );\r\n  const { loading, error, onePropertiesDetails } = devicePropertiesDetails;\r\n\r\n  const deviceSerial = useSelector((state) => state.deviceSerial);\r\n  const {\r\n    loading: loadingPurchaseDetails,\r\n    error: errorPurchaseDetailse,\r\n    allDeviceSerial,\r\n  } = deviceSerial;\r\n\r\n  const deviceTypeList = useSelector((state) => state.deviceTypeList);\r\n  const {\r\n    loading: deviveLoading,\r\n    error: deviceError,\r\n    allDeviceType,\r\n  } = deviceTypeList;\r\n\r\n  const devicePropertiesRemove = useSelector(\r\n    (state) => state.devicePropertiesRemove\r\n  );\r\n  const {\r\n    loading: loadingUpdae,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = devicePropertiesRemove;\r\n\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      dispatch({ type: DEVICE_PROPERTIES_REMOVE_RESET });\r\n      props.history.push(\"/deviceproperties\");\r\n    }\r\n    if (!onePropertiesDetails) {\r\n      dispatch(detailsDeviceProperties(id));\r\n      dispatch(listDeviceType());\r\n      dispatch(getDeviceSerial(id));\r\n    } else {\r\n      setDeviceName(onePropertiesDetails.devicePurchase.deviceType.name);\r\n      setDeviceSerial(onePropertiesDetails.devicePurchase.serial);\r\n      setName(onePropertiesDetails.devicePurchase.id);\r\n      // setCpu(onePropertiesDetails.cpu);\r\n      // setCpuspeed(onePropertiesDetails.cpuspeed);\r\n      setRam(onePropertiesDetails.ram);\r\n      // setAddRam(onePropertiesDetails.addram);\r\n      // setRemoveRam(onePropertiesDetails.removeram);\r\n      setGraphics(onePropertiesDetails.graphics);\r\n      // setAddGraphics(onePropertiesDetails.addgraphics);\r\n      // setRemoveGraphics(onePropertiesDetails.removegraphics);\r\n      setSsd(onePropertiesDetails.ssd);\r\n      // setAddSsd(onePropertiesDetails.addssd);\r\n      // setRemoveSsd(onePropertiesDetails.removessd);\r\n      setHdd(onePropertiesDetails.hdd);\r\n      // setAddHdd(onePropertiesDetails.addhdd);\r\n      // setRemoveHdd(onePropertiesDetails.removehdd);\r\n      setDisplay(onePropertiesDetails.display);\r\n      // setAddDisplay(onePropertiesDetails.adddisplay);\r\n      // setRemoveDisplay(onePropertiesDetails.removedisplay);\r\n      setKeyboard(onePropertiesDetails.keyboard);\r\n      // setAddKeyboard(onePropertiesDetails.addkeyboard);\r\n      // setRemoveKeyboard(onePropertiesDetails.removekeyboard);\r\n      setMouse(onePropertiesDetails.mouse);\r\n      // setAddMouse(onePropertiesDetails.addmouse);\r\n      // setRemoveMouse(onePropertiesDetails.removemouse);\r\n      // setAddLan(onePropertiesDetails.addlan);\r\n      // setRemoveLan(onePropertiesDetails.removelan);\r\n      setOs(onePropertiesDetails.os);\r\n    }\r\n    // dispatch({ type: STATIONARY_PURCHASE_DETAILS_RESET });\r\n  }, [\r\n    dispatch,\r\n    devicePurchaseId,\r\n    successUpdate,\r\n    props.history,\r\n    onePropertiesDetails,\r\n    id,\r\n  ]);\r\n  const nram = Number(ram) - Number(removeram);\r\n  const nssd = Number(ssd) - Number(removessd);\r\n  const nhdd = Number(hdd) - Number(removehdd);\r\n  const ngraphics = Number(graphics) - Number(removegraphics);\r\n  const submitHandler = (e) => {\r\n    e.preventDefault();\r\n    dispatch(\r\n      removeDeviceProperties(\r\n        id,\r\n        nram,\r\n        removeram,\r\n        ngraphics,\r\n        removegraphics,\r\n        nssd,\r\n        removessd,\r\n        nhdd,\r\n        removehdd,\r\n        removedisplay,\r\n        removekeyboard,\r\n        removemouse,\r\n        removelan,\r\n        EntryBy,\r\n        devicePurchaseId\r\n      )\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <form className=\"form\" onSubmit={submitHandler}>\r\n        <div>\r\n          <h1>Remove Device Properties - {deviceName}</h1>\r\n          {loadingUpdae && <LoadingBox></LoadingBox>}\r\n          {errorUpdate && (\r\n            <MessageBox variant=\"danger\">{errorUpdate}</MessageBox>\r\n          )}\r\n        </div>\r\n        {loading ? (\r\n          <LoadingBox />\r\n        ) : error ? (\r\n          <MessageBox variant=\"danger\">{error}</MessageBox>\r\n        ) : (\r\n          <>\r\n            <div>\r\n              {deviveLoading ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : deviceError ? (\r\n                <MessageBox variant=\"danger\">{deviceError}</MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"dname\">Device Name</label>\r\n                  <select\r\n                    name=\"dname\"\r\n                    onChange={(e) => {\r\n                      // setDeviceTypeId(e.target.value);\r\n                      dispatch(getDeviceSerial(e.target.value));\r\n                    }}\r\n                  >\r\n                    <option value=\"\">{deviceName}</option>\r\n                    {allDeviceType.map((devicetype) => (\r\n                      <option key={devicetype.id} value={devicetype.id}>\r\n                        {devicetype.name}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n            <div>\r\n              {loadingPurchaseDetails ? (\r\n                <LoadingBox></LoadingBox>\r\n              ) : // <h1>Please select Device Name</h1>\r\n              errorPurchaseDetailse ? (\r\n                <MessageBox variant=\"danger\">\r\n                  {errorPurchaseDetailse}\r\n                </MessageBox>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"name\">Device Serial</label>\r\n                  <select name=\"name\" onChange={(e) => setName(e.target.value)}>\r\n                    <option value=\"\" required>\r\n                      {serial}\r\n                    </option>\r\n                    {allDeviceSerial.map((devicepro) => (\r\n                      <option key={devicepro.id} value={devicepro.id}>\r\n                        {devicepro.serial}\r\n                      </option>\r\n                    ))}\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"ram\">Remove RAM(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"ram\"\r\n                placeholder=\"RAM(GB)\"\r\n                value={removeram}\r\n                // required\r\n                onChange={(e) => setRemoveRam(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label htmlFor=\"graphics\">Remove Graphics(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"graphics\"\r\n                placeholder=\"Graphics(GB)\"\r\n                // required\r\n                value={removegraphics}\r\n                onChange={(e) => setRemoveGraphics(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"ssd\">Remove SSD(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"ssd\"\r\n                placeholder=\"SSD(GB)\"\r\n                // required\r\n                value={removessd}\r\n                onChange={(e) => setRemoveSsd(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"hdd\">Remove HDD(GB)</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"hdd\"\r\n                placeholder=\"HDD(GB)\"\r\n                // required\r\n                value={removehdd}\r\n                onChange={(e) => setRemoveHdd(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"display\">Remove Display</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"display\"\r\n                placeholder=\"Display\"\r\n                // required\r\n                value={removedisplay}\r\n                onChange={(e) => setRemoveDisplay(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"keyboard\">Remove Keyboard</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"keyboard\"\r\n                placeholder=\"Keyboard\"\r\n                // required\r\n                value={removekeyboard}\r\n                onChange={(e) => setRemoveKeyboard(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"mouse\">Remove Mouse</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"mouse\"\r\n                value={removemouse}\r\n                placeholder=\"Mouse\"\r\n                // required\r\n                onChange={(e) => setRemoveMouse(e.target.value)}\r\n              />\r\n            </div>\r\n            <div>\r\n              <label htmlFor=\"mouse\">Remove LAN Card</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"lan\"\r\n                value={removelan}\r\n                placeholder=\"LAN\"\r\n                // required\r\n                onChange={(e) => setRemoveLan(e.target.value)}\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <label />\r\n              <button className=\"primary\" type=\"submit\">\r\n                Remove Device Properties\r\n              </button>\r\n            </div>\r\n          </>\r\n        )}\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n",{"ruleId":"506","replacedBy":"507"},{"ruleId":"508","replacedBy":"509"},{"ruleId":"510","severity":1,"message":"511","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":16},{"ruleId":"510","severity":1,"message":"514","line":7,"column":8,"nodeType":"512","messageId":"513","endLine":7,"endColumn":18},{"ruleId":"510","severity":1,"message":"515","line":99,"column":11,"nodeType":"512","messageId":"513","endLine":99,"endColumn":25},{"ruleId":"510","severity":1,"message":"516","line":101,"column":11,"nodeType":"512","messageId":"513","endLine":101,"endColumn":25},{"ruleId":"510","severity":1,"message":"517","line":108,"column":11,"nodeType":"512","messageId":"513","endLine":108,"endColumn":22},{"ruleId":"506","replacedBy":"518"},{"ruleId":"508","replacedBy":"519"},{"ruleId":"510","severity":1,"message":"520","line":1,"column":28,"nodeType":"512","messageId":"513","endLine":1,"endColumn":36},{"ruleId":"510","severity":1,"message":"521","line":2,"column":8,"nodeType":"512","messageId":"513","endLine":2,"endColumn":13},{"ruleId":"510","severity":1,"message":"522","line":6,"column":10,"nodeType":"512","messageId":"513","endLine":6,"endColumn":19},{"ruleId":"510","severity":1,"message":"523","line":10,"column":8,"nodeType":"512","messageId":"513","endLine":10,"endColumn":19},{"ruleId":"510","severity":1,"message":"524","line":11,"column":10,"nodeType":"512","messageId":"513","endLine":11,"endColumn":23},{"ruleId":"510","severity":1,"message":"525","line":26,"column":5,"nodeType":"512","messageId":"513","endLine":26,"endColumn":16},{"ruleId":"510","severity":1,"message":"526","line":12,"column":3,"nodeType":"512","messageId":"513","endLine":12,"endColumn":30},{"ruleId":"510","severity":1,"message":"527","line":13,"column":3,"nodeType":"512","messageId":"513","endLine":13,"endColumn":30},{"ruleId":"510","severity":1,"message":"528","line":22,"column":3,"nodeType":"512","messageId":"513","endLine":22,"endColumn":26},{"ruleId":"510","severity":1,"message":"529","line":23,"column":3,"nodeType":"512","messageId":"513","endLine":23,"endColumn":26},{"ruleId":"510","severity":1,"message":"530","line":24,"column":3,"nodeType":"512","messageId":"513","endLine":24,"endColumn":23},{"ruleId":"510","severity":1,"message":"531","line":25,"column":3,"nodeType":"512","messageId":"513","endLine":25,"endColumn":30},{"ruleId":"510","severity":1,"message":"532","line":26,"column":3,"nodeType":"512","messageId":"513","endLine":26,"endColumn":30},{"ruleId":"510","severity":1,"message":"533","line":27,"column":3,"nodeType":"512","messageId":"513","endLine":27,"endColumn":27},{"ruleId":"510","severity":1,"message":"534","line":28,"column":3,"nodeType":"512","messageId":"513","endLine":28,"endColumn":28},{"ruleId":"510","severity":1,"message":"535","line":29,"column":3,"nodeType":"512","messageId":"513","endLine":29,"endColumn":27},{"ruleId":"510","severity":1,"message":"536","line":30,"column":3,"nodeType":"512","messageId":"513","endLine":30,"endColumn":27},{"ruleId":"510","severity":1,"message":"537","line":31,"column":3,"nodeType":"512","messageId":"513","endLine":31,"endColumn":24},{"ruleId":"510","severity":1,"message":"538","line":32,"column":3,"nodeType":"512","messageId":"513","endLine":32,"endColumn":28},{"ruleId":"510","severity":1,"message":"539","line":33,"column":3,"nodeType":"512","messageId":"513","endLine":33,"endColumn":28},{"ruleId":"510","severity":1,"message":"540","line":34,"column":3,"nodeType":"512","messageId":"513","endLine":34,"endColumn":25},{"ruleId":"510","severity":1,"message":"541","line":35,"column":3,"nodeType":"512","messageId":"513","endLine":35,"endColumn":35},{"ruleId":"510","severity":1,"message":"542","line":36,"column":3,"nodeType":"512","messageId":"513","endLine":36,"endColumn":35},{"ruleId":"510","severity":1,"message":"543","line":37,"column":3,"nodeType":"512","messageId":"513","endLine":37,"endColumn":32},{"ruleId":"510","severity":1,"message":"544","line":38,"column":3,"nodeType":"512","messageId":"513","endLine":38,"endColumn":23},{"ruleId":"510","severity":1,"message":"545","line":39,"column":3,"nodeType":"512","messageId":"513","endLine":39,"endColumn":23},{"ruleId":"510","severity":1,"message":"546","line":40,"column":3,"nodeType":"512","messageId":"513","endLine":40,"endColumn":20},{"ruleId":"510","severity":1,"message":"547","line":13,"column":3,"nodeType":"512","messageId":"513","endLine":13,"endColumn":30},{"ruleId":"510","severity":1,"message":"548","line":14,"column":3,"nodeType":"512","messageId":"513","endLine":14,"endColumn":30},{"ruleId":"510","severity":1,"message":"549","line":15,"column":3,"nodeType":"512","messageId":"513","endLine":15,"endColumn":27},{"ruleId":"510","severity":1,"message":"550","line":22,"column":3,"nodeType":"512","messageId":"513","endLine":22,"endColumn":30},{"ruleId":"510","severity":1,"message":"551","line":23,"column":3,"nodeType":"512","messageId":"513","endLine":23,"endColumn":30},{"ruleId":"510","severity":1,"message":"552","line":24,"column":3,"nodeType":"512","messageId":"513","endLine":24,"endColumn":27},{"ruleId":"510","severity":1,"message":"553","line":25,"column":3,"nodeType":"512","messageId":"513","endLine":25,"endColumn":27},{"ruleId":"510","severity":1,"message":"554","line":26,"column":3,"nodeType":"512","messageId":"513","endLine":26,"endColumn":27},{"ruleId":"510","severity":1,"message":"555","line":27,"column":3,"nodeType":"512","messageId":"513","endLine":27,"endColumn":24},{"ruleId":"510","severity":1,"message":"556","line":7,"column":10,"nodeType":"512","messageId":"513","endLine":7,"endColumn":27},{"ruleId":"510","severity":1,"message":"557","line":4,"column":10,"nodeType":"512","messageId":"513","endLine":4,"endColumn":30},{"ruleId":"510","severity":1,"message":"558","line":8,"column":3,"nodeType":"512","messageId":"513","endLine":8,"endColumn":25},{"ruleId":"510","severity":1,"message":"559","line":14,"column":3,"nodeType":"512","messageId":"513","endLine":14,"endColumn":36},{"ruleId":"510","severity":1,"message":"560","line":6,"column":3,"nodeType":"512","messageId":"513","endLine":6,"endColumn":24},{"ruleId":"510","severity":1,"message":"561","line":8,"column":3,"nodeType":"512","messageId":"513","endLine":8,"endColumn":23},{"ruleId":"510","severity":1,"message":"562","line":12,"column":10,"nodeType":"512","messageId":"513","endLine":12,"endColumn":37},{"ruleId":"510","severity":1,"message":"563","line":19,"column":3,"nodeType":"512","messageId":"513","endLine":19,"endColumn":40},{"ruleId":"510","severity":1,"message":"559","line":20,"column":3,"nodeType":"512","messageId":"513","endLine":20,"endColumn":36},{"ruleId":"510","severity":1,"message":"564","line":5,"column":10,"nodeType":"512","messageId":"513","endLine":5,"endColumn":20},{"ruleId":"510","severity":1,"message":"565","line":6,"column":10,"nodeType":"512","messageId":"513","endLine":6,"endColumn":28},{"ruleId":"510","severity":1,"message":"566","line":9,"column":3,"nodeType":"512","messageId":"513","endLine":9,"endColumn":27},{"ruleId":"510","severity":1,"message":"567","line":16,"column":3,"nodeType":"512","messageId":"513","endLine":16,"endColumn":35},{"ruleId":"568","severity":1,"message":"569","line":175,"column":9,"nodeType":"570","endLine":175,"endColumn":13},{"ruleId":"510","severity":1,"message":"571","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},{"ruleId":"510","severity":1,"message":"564","line":5,"column":10,"nodeType":"512","messageId":"513","endLine":5,"endColumn":20},{"ruleId":"510","severity":1,"message":"565","line":6,"column":10,"nodeType":"512","messageId":"513","endLine":6,"endColumn":28},{"ruleId":"510","severity":1,"message":"572","line":8,"column":3,"nodeType":"512","messageId":"513","endLine":8,"endColumn":25},{"ruleId":"510","severity":1,"message":"566","line":9,"column":3,"nodeType":"512","messageId":"513","endLine":9,"endColumn":27},{"ruleId":"510","severity":1,"message":"573","line":10,"column":3,"nodeType":"512","messageId":"513","endLine":10,"endColumn":19},{"ruleId":"510","severity":1,"message":"574","line":18,"column":3,"nodeType":"512","messageId":"513","endLine":18,"endColumn":33},{"ruleId":"510","severity":1,"message":"575","line":19,"column":3,"nodeType":"512","messageId":"513","endLine":19,"endColumn":26},{"ruleId":"510","severity":1,"message":"567","line":21,"column":3,"nodeType":"512","messageId":"513","endLine":21,"endColumn":35},{"ruleId":"510","severity":1,"message":"522","line":23,"column":23,"nodeType":"512","messageId":"513","endLine":23,"endColumn":32},{"ruleId":"510","severity":1,"message":"576","line":24,"column":10,"nodeType":"512","messageId":"513","endLine":24,"endColumn":14},{"ruleId":"510","severity":1,"message":"577","line":47,"column":14,"nodeType":"512","messageId":"513","endLine":47,"endColumn":27},{"ruleId":"510","severity":1,"message":"578","line":48,"column":14,"nodeType":"512","messageId":"513","endLine":48,"endColumn":27},{"ruleId":"510","severity":1,"message":"579","line":49,"column":12,"nodeType":"512","messageId":"513","endLine":49,"endColumn":23},{"ruleId":"510","severity":1,"message":"576","line":2,"column":10,"nodeType":"512","messageId":"513","endLine":2,"endColumn":14},{"ruleId":"510","severity":1,"message":"557","line":6,"column":3,"nodeType":"512","messageId":"513","endLine":6,"endColumn":23},{"ruleId":"510","severity":1,"message":"565","line":7,"column":3,"nodeType":"512","messageId":"513","endLine":7,"endColumn":21},{"ruleId":"510","severity":1,"message":"580","line":12,"column":10,"nodeType":"512","messageId":"513","endLine":12,"endColumn":38},{"ruleId":"510","severity":1,"message":"560","line":5,"column":3,"nodeType":"512","messageId":"513","endLine":5,"endColumn":24},{"ruleId":"510","severity":1,"message":"561","line":6,"column":3,"nodeType":"512","messageId":"513","endLine":6,"endColumn":23},{"ruleId":"510","severity":1,"message":"562","line":11,"column":10,"nodeType":"512","messageId":"513","endLine":11,"endColumn":37},{"ruleId":"510","severity":1,"message":"581","line":6,"column":3,"nodeType":"512","messageId":"513","endLine":6,"endColumn":23},{"ruleId":"510","severity":1,"message":"582","line":8,"column":3,"nodeType":"512","messageId":"513","endLine":8,"endColumn":21},{"ruleId":"510","severity":1,"message":"583","line":13,"column":3,"nodeType":"512","messageId":"513","endLine":13,"endColumn":36},{"ruleId":"510","severity":1,"message":"584","line":15,"column":3,"nodeType":"512","messageId":"513","endLine":15,"endColumn":31},{"ruleId":"510","severity":1,"message":"571","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},{"ruleId":"510","severity":1,"message":"564","line":5,"column":10,"nodeType":"512","messageId":"513","endLine":5,"endColumn":20},{"ruleId":"510","severity":1,"message":"585","line":10,"column":3,"nodeType":"512","messageId":"513","endLine":10,"endColumn":31},{"ruleId":"510","severity":1,"message":"586","line":14,"column":3,"nodeType":"512","messageId":"513","endLine":14,"endColumn":23},{"ruleId":"510","severity":1,"message":"582","line":16,"column":3,"nodeType":"512","messageId":"513","endLine":16,"endColumn":21},{"ruleId":"510","severity":1,"message":"587","line":22,"column":11,"nodeType":"512","messageId":"513","endLine":22,"endColumn":21},{"ruleId":"510","severity":1,"message":"571","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},{"ruleId":"510","severity":1,"message":"564","line":7,"column":10,"nodeType":"512","messageId":"513","endLine":7,"endColumn":20},{"ruleId":"510","severity":1,"message":"588","line":10,"column":3,"nodeType":"512","messageId":"513","endLine":10,"endColumn":31},{"ruleId":"510","severity":1,"message":"589","line":14,"column":3,"nodeType":"512","messageId":"513","endLine":14,"endColumn":27},{"ruleId":"510","severity":1,"message":"590","line":18,"column":3,"nodeType":"512","messageId":"513","endLine":18,"endColumn":23},{"ruleId":"510","severity":1,"message":"571","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},{"ruleId":"510","severity":1,"message":"564","line":5,"column":10,"nodeType":"512","messageId":"513","endLine":5,"endColumn":20},{"ruleId":"510","severity":1,"message":"591","line":9,"column":3,"nodeType":"512","messageId":"513","endLine":9,"endColumn":33},{"ruleId":"510","severity":1,"message":"585","line":10,"column":3,"nodeType":"512","messageId":"513","endLine":10,"endColumn":31},{"ruleId":"510","severity":1,"message":"592","line":13,"column":3,"nodeType":"512","messageId":"513","endLine":13,"endColumn":17},{"ruleId":"510","severity":1,"message":"586","line":14,"column":3,"nodeType":"512","messageId":"513","endLine":14,"endColumn":23},{"ruleId":"510","severity":1,"message":"593","line":15,"column":3,"nodeType":"512","messageId":"513","endLine":15,"endColumn":25},{"ruleId":"510","severity":1,"message":"582","line":16,"column":3,"nodeType":"512","messageId":"513","endLine":16,"endColumn":21},{"ruleId":"510","severity":1,"message":"594","line":17,"column":3,"nodeType":"512","messageId":"513","endLine":17,"endColumn":18},{"ruleId":"510","severity":1,"message":"595","line":20,"column":10,"nodeType":"512","messageId":"513","endLine":20,"endColumn":19},{"ruleId":"510","severity":1,"message":"596","line":28,"column":10,"nodeType":"512","messageId":"513","endLine":28,"endColumn":26},{"ruleId":"510","severity":1,"message":"597","line":53,"column":10,"nodeType":"512","messageId":"513","endLine":53,"endColumn":16},{"ruleId":"510","severity":1,"message":"598","line":53,"column":18,"nodeType":"512","messageId":"513","endLine":53,"endColumn":27},{"ruleId":"510","severity":1,"message":"599","line":54,"column":10,"nodeType":"512","messageId":"513","endLine":54,"endColumn":19},{"ruleId":"510","severity":1,"message":"600","line":54,"column":21,"nodeType":"512","messageId":"513","endLine":54,"endColumn":33},{"ruleId":"510","severity":1,"message":"601","line":62,"column":9,"nodeType":"512","messageId":"513","endLine":62,"endColumn":16},{"ruleId":"510","severity":1,"message":"594","line":7,"column":3,"nodeType":"512","messageId":"513","endLine":7,"endColumn":18},{"ruleId":"510","severity":1,"message":"573","line":11,"column":10,"nodeType":"512","messageId":"513","endLine":11,"endColumn":26},{"ruleId":"510","severity":1,"message":"602","line":15,"column":3,"nodeType":"512","messageId":"513","endLine":15,"endColumn":27},{"ruleId":"510","severity":1,"message":"603","line":16,"column":3,"nodeType":"512","messageId":"513","endLine":16,"endColumn":25},{"ruleId":"510","severity":1,"message":"564","line":5,"column":10,"nodeType":"512","messageId":"513","endLine":5,"endColumn":20},{"ruleId":"510","severity":1,"message":"604","line":10,"column":3,"nodeType":"512","messageId":"513","endLine":10,"endColumn":28},{"ruleId":"510","severity":1,"message":"591","line":11,"column":3,"nodeType":"512","messageId":"513","endLine":11,"endColumn":33},{"ruleId":"510","severity":1,"message":"585","line":13,"column":3,"nodeType":"512","messageId":"513","endLine":13,"endColumn":31},{"ruleId":"510","severity":1,"message":"602","line":14,"column":3,"nodeType":"512","messageId":"513","endLine":14,"endColumn":27},{"ruleId":"510","severity":1,"message":"603","line":15,"column":3,"nodeType":"512","messageId":"513","endLine":15,"endColumn":25},{"ruleId":"510","severity":1,"message":"586","line":19,"column":3,"nodeType":"512","messageId":"513","endLine":19,"endColumn":23},{"ruleId":"510","severity":1,"message":"593","line":20,"column":3,"nodeType":"512","messageId":"513","endLine":20,"endColumn":25},{"ruleId":"510","severity":1,"message":"582","line":21,"column":3,"nodeType":"512","messageId":"513","endLine":21,"endColumn":21},{"ruleId":"510","severity":1,"message":"594","line":22,"column":3,"nodeType":"512","messageId":"513","endLine":22,"endColumn":18},{"ruleId":"510","severity":1,"message":"587","line":32,"column":11,"nodeType":"512","messageId":"513","endLine":32,"endColumn":21},{"ruleId":"510","severity":1,"message":"605","line":47,"column":10,"nodeType":"512","messageId":"513","endLine":47,"endColumn":13},{"ruleId":"510","severity":1,"message":"606","line":47,"column":15,"nodeType":"512","messageId":"513","endLine":47,"endColumn":21},{"ruleId":"510","severity":1,"message":"607","line":48,"column":10,"nodeType":"512","messageId":"513","endLine":48,"endColumn":18},{"ruleId":"510","severity":1,"message":"608","line":48,"column":20,"nodeType":"512","messageId":"513","endLine":48,"endColumn":31},{"ruleId":"510","severity":1,"message":"609","line":49,"column":10,"nodeType":"512","messageId":"513","endLine":49,"endColumn":13},{"ruleId":"510","severity":1,"message":"610","line":49,"column":15,"nodeType":"512","messageId":"513","endLine":49,"endColumn":21},{"ruleId":"510","severity":1,"message":"611","line":50,"column":10,"nodeType":"512","messageId":"513","endLine":50,"endColumn":18},{"ruleId":"510","severity":1,"message":"612","line":50,"column":20,"nodeType":"512","messageId":"513","endLine":50,"endColumn":31},{"ruleId":"510","severity":1,"message":"613","line":51,"column":10,"nodeType":"512","messageId":"513","endLine":51,"endColumn":13},{"ruleId":"510","severity":1,"message":"614","line":51,"column":15,"nodeType":"512","messageId":"513","endLine":51,"endColumn":21},{"ruleId":"510","severity":1,"message":"615","line":52,"column":10,"nodeType":"512","messageId":"513","endLine":52,"endColumn":13},{"ruleId":"510","severity":1,"message":"616","line":52,"column":15,"nodeType":"512","messageId":"513","endLine":52,"endColumn":21},{"ruleId":"510","severity":1,"message":"617","line":53,"column":10,"nodeType":"512","messageId":"513","endLine":53,"endColumn":17},{"ruleId":"510","severity":1,"message":"618","line":53,"column":19,"nodeType":"512","messageId":"513","endLine":53,"endColumn":29},{"ruleId":"510","severity":1,"message":"619","line":54,"column":10,"nodeType":"512","messageId":"513","endLine":54,"endColumn":18},{"ruleId":"510","severity":1,"message":"620","line":54,"column":20,"nodeType":"512","messageId":"513","endLine":54,"endColumn":31},{"ruleId":"510","severity":1,"message":"621","line":55,"column":10,"nodeType":"512","messageId":"513","endLine":55,"endColumn":15},{"ruleId":"510","severity":1,"message":"622","line":55,"column":17,"nodeType":"512","messageId":"513","endLine":55,"endColumn":25},{"ruleId":"510","severity":1,"message":"623","line":56,"column":10,"nodeType":"512","messageId":"513","endLine":56,"endColumn":12},{"ruleId":"510","severity":1,"message":"624","line":56,"column":14,"nodeType":"512","messageId":"513","endLine":56,"endColumn":19},{"ruleId":"510","severity":1,"message":"609","line":5,"column":10,"nodeType":"512","messageId":"513","endLine":5,"endColumn":13},{"ruleId":"510","severity":1,"message":"625","line":7,"column":8,"nodeType":"512","messageId":"513","endLine":7,"endColumn":21},{"ruleId":"510","severity":1,"message":"619","line":26,"column":5,"nodeType":"512","messageId":"513","endLine":26,"endColumn":13},{"ruleId":"510","severity":1,"message":"515","line":93,"column":11,"nodeType":"512","messageId":"513","endLine":93,"endColumn":25},{"ruleId":"510","severity":1,"message":"516","line":95,"column":11,"nodeType":"512","messageId":"513","endLine":95,"endColumn":25},{"ruleId":"510","severity":1,"message":"517","line":102,"column":11,"nodeType":"512","messageId":"513","endLine":102,"endColumn":22},{"ruleId":"510","severity":1,"message":"626","line":109,"column":9,"nodeType":"512","messageId":"513","endLine":109,"endColumn":18},{"ruleId":"510","severity":1,"message":"627","line":111,"column":9,"nodeType":"512","messageId":"513","endLine":111,"endColumn":19},{"ruleId":"510","severity":1,"message":"625","line":7,"column":8,"nodeType":"512","messageId":"513","endLine":7,"endColumn":21},{"ruleId":"510","severity":1,"message":"628","line":35,"column":5,"nodeType":"512","messageId":"513","endLine":35,"endColumn":12},{"ruleId":"510","severity":1,"message":"626","line":55,"column":9,"nodeType":"512","messageId":"513","endLine":55,"endColumn":18},{"ruleId":"510","severity":1,"message":"627","line":57,"column":9,"nodeType":"512","messageId":"513","endLine":57,"endColumn":19},{"ruleId":"510","severity":1,"message":"515","line":118,"column":11,"nodeType":"512","messageId":"513","endLine":118,"endColumn":25},{"ruleId":"510","severity":1,"message":"516","line":120,"column":11,"nodeType":"512","messageId":"513","endLine":120,"endColumn":25},{"ruleId":"510","severity":1,"message":"629","line":126,"column":11,"nodeType":"512","messageId":"513","endLine":126,"endColumn":25},{"ruleId":"510","severity":1,"message":"517","line":127,"column":11,"nodeType":"512","messageId":"513","endLine":127,"endColumn":22},{"ruleId":"510","severity":1,"message":"571","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},{"ruleId":"510","severity":1,"message":"564","line":7,"column":10,"nodeType":"512","messageId":"513","endLine":7,"endColumn":20},{"ruleId":"510","severity":1,"message":"630","line":10,"column":3,"nodeType":"512","messageId":"513","endLine":10,"endColumn":33},{"ruleId":"510","severity":1,"message":"588","line":11,"column":3,"nodeType":"512","messageId":"513","endLine":11,"endColumn":31},{"ruleId":"510","severity":1,"message":"589","line":16,"column":3,"nodeType":"512","messageId":"513","endLine":16,"endColumn":27},{"ruleId":"510","severity":1,"message":"631","line":19,"column":3,"nodeType":"512","messageId":"513","endLine":19,"endColumn":25},{"ruleId":"510","severity":1,"message":"590","line":20,"column":3,"nodeType":"512","messageId":"513","endLine":20,"endColumn":23},{"ruleId":"510","severity":1,"message":"605","line":28,"column":10,"nodeType":"512","messageId":"513","endLine":28,"endColumn":13},{"ruleId":"510","severity":1,"message":"606","line":28,"column":15,"nodeType":"512","messageId":"513","endLine":28,"endColumn":21},{"ruleId":"510","severity":1,"message":"607","line":29,"column":10,"nodeType":"512","messageId":"513","endLine":29,"endColumn":18},{"ruleId":"510","severity":1,"message":"608","line":29,"column":20,"nodeType":"512","messageId":"513","endLine":29,"endColumn":31},{"ruleId":"510","severity":1,"message":"632","line":32,"column":10,"nodeType":"512","messageId":"513","endLine":32,"endColumn":19},{"ruleId":"510","severity":1,"message":"633","line":32,"column":21,"nodeType":"512","messageId":"513","endLine":32,"endColumn":33},{"ruleId":"510","severity":1,"message":"634","line":35,"column":10,"nodeType":"512","messageId":"513","endLine":35,"endColumn":24},{"ruleId":"510","severity":1,"message":"635","line":35,"column":26,"nodeType":"512","messageId":"513","endLine":35,"endColumn":43},{"ruleId":"510","severity":1,"message":"636","line":38,"column":10,"nodeType":"512","messageId":"513","endLine":38,"endColumn":19},{"ruleId":"510","severity":1,"message":"637","line":38,"column":21,"nodeType":"512","messageId":"513","endLine":38,"endColumn":33},{"ruleId":"510","severity":1,"message":"638","line":41,"column":10,"nodeType":"512","messageId":"513","endLine":41,"endColumn":19},{"ruleId":"510","severity":1,"message":"639","line":41,"column":21,"nodeType":"512","messageId":"513","endLine":41,"endColumn":33},{"ruleId":"510","severity":1,"message":"617","line":42,"column":10,"nodeType":"512","messageId":"513","endLine":42,"endColumn":17},{"ruleId":"510","severity":1,"message":"619","line":43,"column":10,"nodeType":"512","messageId":"513","endLine":43,"endColumn":18},{"ruleId":"510","severity":1,"message":"640","line":45,"column":10,"nodeType":"512","messageId":"513","endLine":45,"endColumn":24},{"ruleId":"510","severity":1,"message":"641","line":45,"column":26,"nodeType":"512","messageId":"513","endLine":45,"endColumn":43},{"ruleId":"510","severity":1,"message":"621","line":46,"column":10,"nodeType":"512","messageId":"513","endLine":46,"endColumn":15},{"ruleId":"510","severity":1,"message":"642","line":48,"column":10,"nodeType":"512","messageId":"513","endLine":48,"endColumn":21},{"ruleId":"510","severity":1,"message":"643","line":48,"column":23,"nodeType":"512","messageId":"513","endLine":48,"endColumn":37},{"ruleId":"510","severity":1,"message":"623","line":49,"column":10,"nodeType":"512","messageId":"513","endLine":49,"endColumn":12},{"ruleId":"510","severity":1,"message":"599","line":51,"column":10,"nodeType":"512","messageId":"513","endLine":51,"endColumn":19},{"ruleId":"510","severity":1,"message":"600","line":51,"column":21,"nodeType":"512","messageId":"513","endLine":51,"endColumn":33},{"ruleId":"510","severity":1,"message":"644","line":53,"column":10,"nodeType":"512","messageId":"513","endLine":53,"endColumn":23},{"ruleId":"510","severity":1,"message":"645","line":53,"column":25,"nodeType":"512","messageId":"513","endLine":53,"endColumn":41},{"ruleId":"510","severity":1,"message":"571","line":3,"column":8,"nodeType":"512","messageId":"513","endLine":3,"endColumn":18},{"ruleId":"510","severity":1,"message":"564","line":7,"column":10,"nodeType":"512","messageId":"513","endLine":7,"endColumn":20},{"ruleId":"510","severity":1,"message":"646","line":9,"column":3,"nodeType":"512","messageId":"513","endLine":9,"endColumn":30},{"ruleId":"510","severity":1,"message":"630","line":11,"column":3,"nodeType":"512","messageId":"513","endLine":11,"endColumn":33},{"ruleId":"510","severity":1,"message":"588","line":12,"column":3,"nodeType":"512","messageId":"513","endLine":12,"endColumn":31},{"ruleId":"510","severity":1,"message":"647","line":15,"column":3,"nodeType":"512","messageId":"513","endLine":15,"endColumn":22},{"ruleId":"510","severity":1,"message":"589","line":17,"column":3,"nodeType":"512","messageId":"513","endLine":17,"endColumn":27},{"ruleId":"510","severity":1,"message":"631","line":21,"column":3,"nodeType":"512","messageId":"513","endLine":21,"endColumn":25},{"ruleId":"510","severity":1,"message":"590","line":22,"column":3,"nodeType":"512","messageId":"513","endLine":22,"endColumn":23},{"ruleId":"510","severity":1,"message":"605","line":30,"column":10,"nodeType":"512","messageId":"513","endLine":30,"endColumn":13},{"ruleId":"510","severity":1,"message":"606","line":30,"column":15,"nodeType":"512","messageId":"513","endLine":30,"endColumn":21},{"ruleId":"510","severity":1,"message":"607","line":31,"column":10,"nodeType":"512","messageId":"513","endLine":31,"endColumn":18},{"ruleId":"510","severity":1,"message":"608","line":31,"column":20,"nodeType":"512","messageId":"513","endLine":31,"endColumn":31},{"ruleId":"510","severity":1,"message":"648","line":33,"column":10,"nodeType":"512","messageId":"513","endLine":33,"endColumn":16},{"ruleId":"510","severity":1,"message":"649","line":33,"column":18,"nodeType":"512","messageId":"513","endLine":33,"endColumn":27},{"ruleId":"510","severity":1,"message":"650","line":36,"column":10,"nodeType":"512","messageId":"513","endLine":36,"endColumn":21},{"ruleId":"510","severity":1,"message":"651","line":36,"column":23,"nodeType":"512","messageId":"513","endLine":36,"endColumn":37},{"ruleId":"510","severity":1,"message":"652","line":39,"column":10,"nodeType":"512","messageId":"513","endLine":39,"endColumn":16},{"ruleId":"510","severity":1,"message":"653","line":39,"column":18,"nodeType":"512","messageId":"513","endLine":39,"endColumn":27},{"ruleId":"510","severity":1,"message":"654","line":42,"column":10,"nodeType":"512","messageId":"513","endLine":42,"endColumn":16},{"ruleId":"510","severity":1,"message":"655","line":42,"column":18,"nodeType":"512","messageId":"513","endLine":42,"endColumn":27},{"ruleId":"510","severity":1,"message":"617","line":44,"column":10,"nodeType":"512","messageId":"513","endLine":44,"endColumn":17},{"ruleId":"510","severity":1,"message":"619","line":45,"column":10,"nodeType":"512","messageId":"513","endLine":45,"endColumn":18},{"ruleId":"510","severity":1,"message":"656","line":46,"column":10,"nodeType":"512","messageId":"513","endLine":46,"endColumn":21},{"ruleId":"510","severity":1,"message":"657","line":46,"column":23,"nodeType":"512","messageId":"513","endLine":46,"endColumn":37},{"ruleId":"510","severity":1,"message":"621","line":48,"column":10,"nodeType":"512","messageId":"513","endLine":48,"endColumn":15},{"ruleId":"510","severity":1,"message":"658","line":49,"column":10,"nodeType":"512","messageId":"513","endLine":49,"endColumn":18},{"ruleId":"510","severity":1,"message":"659","line":49,"column":20,"nodeType":"512","messageId":"513","endLine":49,"endColumn":31},{"ruleId":"510","severity":1,"message":"623","line":51,"column":10,"nodeType":"512","messageId":"513","endLine":51,"endColumn":12},{"ruleId":"510","severity":1,"message":"597","line":52,"column":10,"nodeType":"512","messageId":"513","endLine":52,"endColumn":16},{"ruleId":"510","severity":1,"message":"598","line":52,"column":18,"nodeType":"512","messageId":"513","endLine":52,"endColumn":27},{"ruleId":"510","severity":1,"message":"660","line":54,"column":10,"nodeType":"512","messageId":"513","endLine":54,"endColumn":20},{"ruleId":"510","severity":1,"message":"661","line":54,"column":22,"nodeType":"512","messageId":"513","endLine":54,"endColumn":35},"no-native-reassign",["662"],"no-negated-in-lhs",["663"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'UserScreen' is defined but never used.","'filterUsername' is assigned a value but never used.","'filterCpuspeed' is assigned a value but never used.","'filterMouse' is assigned a value but never used.",["662"],["663"],"'useState' is defined but never used.","'Users' is defined but never used.","'listUsers' is defined but never used.","'Collapsible' is defined but never used.","'BsChevronDown' is defined but never used.","'deviceBrand' is assigned a value but never used.","'USER_UPDATE_PROFILE_REQUEST' is assigned a value but never used.","'USER_UPDATE_PROFILE_SUCCESS' is assigned a value but never used.","'USER_DBTBCREATE_REQUEST' is assigned a value but never used.","'USER_DBTBCREATE_SUCCESS' is assigned a value but never used.","'USER_DBTBCREATE_FAIL' is assigned a value but never used.","'USER_DETAILS_COMMON_REQUEST' is assigned a value but never used.","'USER_DETAILS_COMMON_SUCCESS' is assigned a value but never used.","'USER_DETAILS_COMMON_FAIL' is assigned a value but never used.","'USER_DETAILS_COMMON_RESET' is assigned a value but never used.","'USER_LIST_COMMON_REQUEST' is assigned a value but never used.","'USER_LIST_COMMON_SUCCESS' is assigned a value but never used.","'USER_LIST_COMMON_FAIL' is assigned a value but never used.","'TABLE_LIST_COMMON_REQUEST' is assigned a value but never used.","'TABLE_LIST_COMMON_SUCCESS' is assigned a value but never used.","'TABLE_LIST_COMMON_FAIL' is assigned a value but never used.","'TABLE_COLUMN_LIST_COMMON_REQUEST' is assigned a value but never used.","'TABLE_COLUMN_LIST_COMMON_SUCCESS' is assigned a value but never used.","'TABLE_COLUMN_LIST_COMMON_FAIL' is assigned a value but never used.","'TABLE_CREATE_REQUEST' is assigned a value but never used.","'TABLE_CREATE_SUCCESS' is assigned a value but never used.","'TABLE_CREATE_FAIL' is assigned a value but never used.","'USER_UPDATE_PROFILE_REQUEST' is defined but never used.","'USER_UPDATE_PROFILE_SUCCESS' is defined but never used.","'USER_UPDATE_PROFILE_FAIL' is defined but never used.","'USER_DETAILS_COMMON_REQUEST' is defined but never used.","'USER_DETAILS_COMMON_SUCCESS' is defined but never used.","'USER_DETAILS_COMMON_FAIL' is defined but never used.","'USER_LIST_COMMON_REQUEST' is defined but never used.","'USER_LIST_COMMON_SUCCESS' is defined but never used.","'USER_LIST_COMMON_FAIL' is defined but never used.","'USER_CREATE_RESET' is defined but never used.","'deleteStationaryType' is defined but never used.","'listStationaryPurchase' is defined but never used.","'STATIONARY_PURCHASE_DETAILS_RESET' is defined but never used.","'detailsStationaryType' is defined but never used.","'updateStationaryType' is defined but never used.","'STATIONAR_TYPE_UPDATE_RESET' is defined but never used.","'STATIONARY_ONE_PURCHASE_DETAILS_RESET' is defined but never used.","'listSource' is defined but never used.","'listStationaryType' is defined but never used.","'createStationaryPurchase' is defined but never used.","'STATIONARY_PURCHASE_CREATE_RESET' is defined but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'DatePicker' is defined but never used.","'createStationaryAssign' is defined but never used.","'getAllStationary' is defined but never used.","'SEARCH_STATIONARY_ASSIGN_RESET' is defined but never used.","'STATIONARY_ASSIGN_RESET' is defined but never used.","'Link' is defined but never used.","'successCreate' is assigned a value but never used.","'loadingCreate' is assigned a value but never used.","'errorCreate' is assigned a value but never used.","'STATIONAR_TYPE_DETAILS_RESET' is defined but never used.","'deleteDevicePurchase' is defined but never used.","'listDevicePurchase' is defined but never used.","'DEVICE_ONE_PURCHASE_DETAILS_RESET' is defined but never used.","'DEVICE_PROPERTIES_LIST_RESET' is defined but never used.","'DEVICE_PURCHASE_CREATE_RESET' is defined but never used.","'createDevicePurchase' is defined but never used.","'pageNumber' is assigned a value but never used.","'DEVICE_PURCHASE_UPDATE_RESET' is defined but never used.","'detailsDevicePurchaseOne' is defined but never used.","'updateDevicePurchase' is defined but never used.","'DEVICE_PROPERTIES_CREATE_RESET' is defined but never used.","'listDeviceType' is defined but never used.","'createDeviceProperties' is defined but never used.","'getDeviceSerial' is defined but never used.","'useParams' is defined but never used.","'devicePurchaseId' is assigned a value but never used.","'addlan' is assigned a value but never used.","'setAddLan' is assigned a value but never used.","'removelan' is assigned a value but never used.","'setRemoveLan' is assigned a value but never used.","'EntryBy' is assigned a value but never used.","'DEVICE_SERIAL_LIST_RESET' is defined but never used.","'DEVICE_TYPE_LIST_RESET' is defined but never used.","'DEVICE_DETAILS_LIST_RESET' is defined but never used.","'cpu' is assigned a value but never used.","'setCpu' is assigned a value but never used.","'cpuspeed' is assigned a value but never used.","'setCpuspeed' is assigned a value but never used.","'ram' is assigned a value but never used.","'setRam' is assigned a value but never used.","'graphics' is assigned a value but never used.","'setGraphics' is assigned a value but never used.","'ssd' is assigned a value but never used.","'setSsd' is assigned a value but never used.","'hdd' is assigned a value but never used.","'setHdd' is assigned a value but never used.","'display' is assigned a value but never used.","'setDisplay' is assigned a value but never used.","'keyboard' is assigned a value but never used.","'setKeyboard' is assigned a value but never used.","'mouse' is assigned a value but never used.","'setMouse' is assigned a value but never used.","'os' is assigned a value but never used.","'setOs' is assigned a value but never used.","'ReactPaginate' is defined but never used.","'pageCount' is assigned a value but never used.","'changePage' is assigned a value but never used.","'devices' is assigned a value but never used.","'filterKeyboard' is assigned a value but never used.","'DEVICE_PROPERTIES_UPDATE_RESET' is defined but never used.","'updateDeviceProperties' is defined but never used.","'removeram' is assigned a value but never used.","'setRemoveRam' is assigned a value but never used.","'removegraphics' is assigned a value but never used.","'setRemoveGraphics' is assigned a value but never used.","'removessd' is assigned a value but never used.","'setRemoveSsd' is assigned a value but never used.","'removehdd' is assigned a value but never used.","'setRemoveHdd' is assigned a value but never used.","'removekeyboard' is assigned a value but never used.","'setRemoveKeyboard' is assigned a value but never used.","'removemouse' is assigned a value but never used.","'setRemoveMouse' is assigned a value but never used.","'removedisplay' is assigned a value but never used.","'setRemoveDisplay' is assigned a value but never used.","'DEVICE_PROPERTIES_ADD_RESET' is defined but never used.","'addDeviceProperties' is defined but never used.","'addram' is assigned a value but never used.","'setAddRam' is assigned a value but never used.","'addgraphics' is assigned a value but never used.","'setAddGraphics' is assigned a value but never used.","'addssd' is assigned a value but never used.","'setAddSsd' is assigned a value but never used.","'addhdd' is assigned a value but never used.","'setAddHdd' is assigned a value but never used.","'addkeyboard' is assigned a value but never used.","'setAddKeyboard' is assigned a value but never used.","'addmouse' is assigned a value but never used.","'setAddMouse' is assigned a value but never used.","'adddisplay' is assigned a value but never used.","'setAddDisplay' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]